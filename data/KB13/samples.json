{
    "lines that contain only the letters 'agde' in some order.": {
        "regex": "^[agde]+$",
        "string_matches": [
            "agde",
            "agedagde",
            "aagde"
        ],
        "string_mismatches": [
            "hregfwa",
            "agxde",
            "jjjj"
        ]
    },
    "lines using words ending in 'er'.": {
        "regex": ".*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The larger the better",
            "Manager handled the case",
            "this worker is stronger"
        ],
        "string_mismatches": [
            "This is a sample string",
            "a false sentence",
            "Stacks are cool"
        ]
    },
    "lines that contain the word 'dance'": {
        "regex": ".*\\bdance\\b.*",
        "string_matches": [
            "dance the night away",
            "Let's have a dance",
            "I love to dance"
        ],
        "string_mismatches": [
            "singing in the rain",
            "walking in the park",
            "this dancer is amazing"
        ]
    },
    "lines which contain the substring 'bar'": {
        "regex": ".*bar.*",
        "string_matches": [
            "foobar",
            "barfoo",
            "beautiful barry"
        ],
        "string_mismatches": [
            "foo",
            "baz",
            "I like the color blue"
        ]
    },
    "lines that include at least three capital letters": {
        "regex": ".*[A-Z].*[A-Z].*[A-Z].*",
        "string_matches": [
            "ABCDefghi",
            "ThisIsAString",
            "Hi my name is BoB"
        ],
        "string_mismatches": [
            "abcdefghi",
            "this Is a string",
            "Another Example"
        ]
    },
    "lines using words that begin with 'z'.": {
        "regex": ".*\\bz[A-Za-z]*\\b.*",
        "string_matches": [
            "Zealous zebra zigzags.",
            "the zookeeper is here",
            "Fuzzy buzzard zooms"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another string here.",
            "hello there, Ozzy!"
        ]
    },
    "lines that have at least 5 digits.": {
        "regex": "(.*[0-9].*){5,}",
        "string_matches": [
            "i have 20 books, 5 pens and 10 pencils",
            "1000000 is a big number",
            "45678901"
        ],
        "string_mismatches": [
            "12 and 3",
            "no numbers here",
            "1998"
        ]
    },
    "lines that ends with letter 'f'": {
        "regex": ".*f",
        "string_matches": [
            "that is alot of stuff",
            "take that off",
            "i love marshmellow fluff"
        ],
        "string_mismatches": [
            "this is a test",
            "filled with joy",
            "I think I am funny"
        ]
    },
    "lines using a word that contains the letters 'der'": {
        "regex": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*",
        "string_matches": [
            "Under the weather",
            "The order is important.",
            "kindergarten is fun"
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "no matching words here.",
            "a dream is a wish the heart makes"
        ]
    },
    "lines that have at least 2 words with exactly 4 letters anywhere": {
        "regex": "(.*\\b[A-Za-z]{4}\\b.*){2}",
        "string_matches": [
            "a big word list here",
            "this is a successful test",
            "3 furr cats"
        ],
        "string_mismatches": [
            "1234 nope",
            "this is a sentence",
            "no match here because too short"
        ]
    },
    "lines that have words ending in 'ing'": {
        "regex": ".*\\b[A-Za-z]*ing\\b.*",
        "string_matches": [
            "coding is my job",
            "They are playing.",
            "we're singing in the rain"
        ],
        "string_mismatches": [
            "sun shines bright",
            "A very short line",
            "I don't like to code"
        ]
    },
    "lines that contain the number '254' at least twice.": {
        "regex": "(.*254.*){2}",
        "string_matches": [
            "254 and 254",
            "This line contains 254 twice, look- 254, 254.",
            "this line does not contain 254254."
        ],
        "string_mismatches": [
            "This line does not contain 254",
            "this is not it",
            "no 254 at all"
        ]
    },
    "lines containing the word 'art'.": {
        "regex": ".*\b[Aa]rt\b.*",
        "string_matches": [
            "Art is beauty.",
            "the art museum is nearby",
            "this is a work of art"
        ],
        "string_mismatches": [
            "he is a very artistic person.",
            "Awesome artists create inspiring masterpieces.",
            "this is a sentence about math."
        ]
    },
    "lines which contain only a single uppercase letter as the whole sentence": {
        "regex": "^[A-Z]$",
        "string_matches": [
            "A",
            "Z",
            "C"
        ],
        "string_mismatches": [
            "aA",
            "BB",
            "h"
        ]
    },
    "lines that contain at least one numeric digit in it.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "terrible 2's",
            "covid struck in 2020",
            "3 days ago i fell"
        ],
        "string_mismatches": [
            "a sentence with no numbers",
            "there are six cupdakes",
            "ghi"
        ]
    },
    "lines that end in an 'o'": {
        "regex": ".*o",
        "string_matches": [
            "you should do more cardio",
            "this is a full sentence- no",
            "I love a good burrito"
        ],
        "string_mismatches": [
            "hello?",
            "suns out guns out",
            "I would love an oreo cookie"
        ]
    },
    "lines having words ending with 'ne'.": {
        "regex": ".*\\b[A-Za-z]*ne\\b.*",
        "string_matches": [
            "This sentience contains one line",
            "you are the only one",
            "he walks with a cane"
        ],
        "string_mismatches": [
            "this sentence dosen't end with ne.",
            "laugh out loud",
            "twenty one is greater than nineteen"
        ]
    },
    "lines that contain the numbers '9', and '10' as whole numbers": {
        "regex": ".*(\\b9\\b.*\\b10\\b|\\b10\\b.*\\b9\\b).*",
        "string_matches": [
            "lines 9 and 10 both contain numbers",
            "The number 10 is greater than 9",
            "9 is an odd number while 10 is an even number"
        ],
        "string_mismatches": [
            "100 is bigger than 9",
            "why is 6 affraid of 7? because 7 8 9",
            "109 is a prime number"
        ]
    },
    "lines with the word 'Triple' is directly followed by words that start with 'X'": {
        "regex": ".*\\bTriple\\b\\s+\\bX[A-Za-z]*\\b.*",
        "string_matches": [
            "Triple Xylophone",
            "Triple X-ray",
            "Triple XL is a clothing size"
        ],
        "string_mismatches": [
            "triple X is a movie rating",
            "Do you have a Triple A battery?",
            "The Triple mighty X-ray"
        ]
    },
    "lines where 'son' or 'soon' appears, followed somewhere later by 'su'.": {
        "regex": ".*(son|soon).*su.*",
        "string_matches": [
            "soon to be sufficient",
            "Mason superman",
            "soon superheroes arrived"
        ],
        "string_mismatches": [
            "son of a gun",
            "soon to be wed",
            "suns out guns out"
        ]
    },
    "lines using 'q' before 'r'": {
        "regex": ".*q.*r.*",
        "string_matches": [
            "manual quration of data is important",
            "The query was resolved",
            "the request was approved"
        ],
        "string_mismatches": [
            "Quick brown fox jumps over a lazy dog.",
            "the queen of england passed away",
            "The room is very quite"
        ]
    },
    "lines containing a word using the letters 'tt'.": {
        "regex": ".*\\b[A-Za-z]*tt[A-Za-z]*\\b.*",
        "string_matches": [
            "this better be good",
            "The water bottle is empty",
            "Rattle snakes are extremly dangerous"
        ],
        "string_mismatches": [
            "The answer is 42.",
            "Dylan went to the park.",
            "programming is fun"
        ]
    },
    "lines that have at least 2 characters anywhere inside it": {
        "regex": ".*.{2,}.*",
        "string_matches": [
            "!!",
            "a b c",
            ":)"
        ],
        "string_mismatches": [
            "a",
            "",
            " "
        ]
    },
    "lines that contain words with 'ru'.": {
        "regex": ".*\\b[A-Za-z]*ru[A-Za-z]*\\b.*",
        "string_matches": [
            "this cruise ship is amazing!",
            "his rupture was very severe",
            "The truth is out there"
        ],
        "string_mismatches": [
            "Rural towns are peaceful",
            "four furry friends are in the park",
            "The source is available online."
        ]
    },
    "lines containing words with the substring 'ause'": {
        "regex": ".*\\b[A-Za-z]*ause[A-Za-z]*\\b.*",
        "string_matches": [
            "because of you I can't sleep",
            "the cause of the problem is unknown",
            "I do it for the applause. applause. applause"
        ],
        "string_mismatches": [
            "this sentence has no relevant words",
            "nuances are important",
            "He saw her across the room and waved."
        ]
    },
    "lines that contains 'ABC' followed later by 'JFK' (in that order)": {
        "regex": ".*ABC.*JFK.*",
        "string_matches": [
            "ABCDEFGHIJFK is almost the correct alphabet",
            "ABCs is a song but not JFK",
            "Just ABC but no JFK"
        ],
        "string_mismatches": [
            "JFK comes before ABC",
            "ABBA is an amazing band",
            "No JFK here"
        ]
    },
    "lines that contain numbers": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "my sister is 3 years younger than me",
            "I have 2 dogs and 3 cats",
            "he was born on 1/1/2000"
        ],
        "string_mismatches": [
            "seven is a lucky number",
            "I have a dozen eggs",
            "no digits in this line"
        ]
    },
    "lines that contain words ending with vowels.": {
        "regex": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*",
        "string_matches": [
            "The book lies on the table",
            "A tuba and a viola are in the orchestra",
            "we went to the ZOO"
        ],
        "string_mismatches": [
            "just some random text",
            "Is the sky blue?",
            "23 and me is a DNA testing company"
        ]
    },
    "lines that use words starting with 's'.": {
        "regex": ".*\\bs[A-Za-z]*\\b.*",
        "string_matches": [
            "starting with some words",
            "Lets see how this goes",
            "suns out buns out"
        ],
        "string_mismatches": [
            "The Sun is yellow",
            "elderberry is a fruit",
            "I love pizza"
        ]
    },
    "lines using 2 space seperated words or more": {
        "regex": "^.*\\b[A-Za-z]+\\b(?:\\s+\\b[A-Za-z]+\\b)+.*$",
        "string_matches": [
            "This has only one word",
            "Hell ya!",
            ""
        ],
        "string_mismatches": [
            "race-car",
            "23 dogs",
            "supercaifragilisticexpialidocious"
        ]
    },
    "lines using at least 3 characters": {
        "regex": ".*.{3}.*",
        "string_matches": [
            "---",
            " hi",
            "this is a regular line"
        ],
        "string_mismatches": [
            "18",
            "",
            "A."
        ]
    },
    "lines that contain the phrase 'city of' as a whole word.": {
        "regex": ".*(.*\\bcity of\\b.*).*",
        "string_matches": [
            "city of lights",
            "the city of angels",
            "the big city of dreams"
        ],
        "string_mismatches": [
            "this city is consisted of many people",
            "Welcome to the electricity of the grid",
            "City of the future"
        ]
    },
    "lines that contain between two to seven words.": {
        "regex": "([^A-Za-z]*\\b[A-Za-z][A-Za-z]*\\b[^A-Za-z]*){2,7}",
        "string_matches": [
            " this, is! a simple... sentence",
            "This is a sentence",
            "line that contains only 1 word inside it"
        ],
        "string_mismatches": [
            "Short",
            "Hello !!",
            "one two three four five six seven eight"
        ]
    },
    "lines that use words starting with 'ga'.": {
        "regex": ".*\\bga[A-Za-z]*\\b.*",
        "string_matches": [
            "In a galaxy far far away...",
            "he is such a gasslighter",
            "gag's on you my friend!"
        ],
        "string_mismatches": [
            "egales are majestic birds",
            "being agile is a good trait",
            "This is about justice"
        ]
    },
    "lines containing any number with an '8' in it.": {
        "regex": ".*8.*",
        "string_matches": [
            "The number 8 is my lucky number",
            "gr8 is short for great",
            "1000/8 = 125"
        ],
        "string_mismatches": [
            "eight can be divided by two",
            "it's 30 degrees outside",
            "a sentence with no numbers"
        ]
    },
    "lines which contain only the digit '3'.": {
        "regex": "^3+$",
        "string_matches": [
            "3",
            "33333333",
            "33"
        ],
        "string_mismatches": [
            " 3 ",
            "30 is a milestone",
            "33.3"
        ]
    },
    "lines that contain words starting with 'pa'.": {
        "regex": ".*\\bpa[A-Za-z]*\\b.*",
        "string_matches": [
            "The package was delivered",
            "is the panda eating?",
            "I found some peaches in the pantry"
        ],
        "string_mismatches": [
            "Parks and recreation is a great show",
            "I love apples",
            "that is way out of the ballpark"
        ]
    },
    "lines that contain only three words.": {
        "regex": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}",
        "string_matches": [
            "how are you?",
            "this is it",
            "Sun shines brightly"
        ],
        "string_mismatches": [
            "Wait, what?!",
            "this has too many words",
            "1 2 3"
        ]
    },
    "lines where the number '0' appears": {
        "regex": ".*0.*",
        "string_matches": [
            "101 != 1",
            "just bought 8 burgers for $0.99",
            "Start from zero, 0"
        ],
        "string_mismatches": [
            "zero is a number",
            "The sofa is very comfortable.",
            "another one bites the dust"
        ]
    },
    "lines that feature 'email' followed by the word 'spam' anywhere after.": {
        "regex": ".*email.*\\bspam\\b.*",
        "string_matches": [
            "You received an email about spam",
            "think you got spam? Check your email in the spam folder",
            "email spam is a problem"
        ],
        "string_mismatches": [
            "spam messages flood my email",
            "I've got so many emails",
            "spam emails are annoying"
        ]
    },
    "lines that have within them words ending in 'ch'.": {
        "regex": ".*\\b[A-Za-z]*ch\\b.*",
        "string_matches": [
            "The beach is beautiful",
            "catch me if you can",
            "no match here"
        ],
        "string_mismatches": [
            "chocalate is delicious",
            "hit",
            "cherry is a fruit"
        ]
    },
    "lines using the word 'clue'": {
        "regex": ".*\\bclue\\b.*",
        "string_matches": [
            "Follow the clue to the treasure.",
            "The clue was hidden in plain sight.",
            "The crossword clue was difficult to solve"
        ],
        "string_mismatches": [
            "This string lacks any clues.",
            "There are no clues here.",
            "This sentence contains no clues whatsoever"
        ]
    },
    "lines that contain 'news' before 'paper' or 'show'.": {
        "regex": ".*news.*(paper|show).*",
        "string_matches": [
            "The news show is on",
            "are news still on paper?",
            "news have gone digital, no more paper"
        ],
        "string_mismatches": [
            "breaking news- shark attack injures 3",
            "this show is based on the news",
            "News paper is a thing of the past"
        ]
    },
    "lines using 'min' before 'imal'": {
        "regex": ".*min.*imal.*",
        "string_matches": [
            "minnie mouse has an optimal life",
            "maximal flow minimal cut",
            "minimalists are happy people"
        ],
        "string_mismatches": [
            "many animals are miniatures",
            "primal instincts are strong",
            "minature is a small version"
        ]
    },
    "lines that include the string 'rst'": {
        "regex": ".*rst.*",
        "string_matches": [
            "understanding is the first step",
            "I'm so thirsty",
            "the worst is yet to come"
        ],
        "string_mismatches": [
            "rest is necessary",
            "FirsT is the best",
            "greatest of all time"
        ]
    },
    "lines that contain at least two words starting with the letter 'h' in them.": {
        "regex": "(?i)(.*\bh[A-Za-z]*\b.*){2}",
        "string_matches": [
            "Hello, how are you?",
            "somtimes being happy is hard",
            "we have no H's here"
        ],
        "string_mismatches": [
            "he is a very artistic person.",
            "His leg was fully functional.",
            "I believe we will succeed"
        ]
    },
    "lines that begin with a number": {
        "regex": "[0-9].*",
        "string_matches": [
            "2 dogs play in the park",
            "1000 is a big number",
            "0.7 is a fraction"
        ],
        "string_mismatches": [
            "the number 2 is a prime number",
            " 18 is a milestone",
            "winter is coming"
        ]
    },
    "lines using words containing 'ope'.": {
        "regex": ".*\\b[A-Za-z]*ope[A-Za-z]*\\b.*",
        "string_matches": [
            "the opera concert was amazing",
            "Jennefer Lopez is a singer",
            "open ai is a tech company"
        ],
        "string_mismatches": [
            "lolly pops are delicious",
            "people are hopeful",
            "ops i did it again"
        ]
    },
    "lines that use words starting with 'bi'.": {
        "regex": ".*\\bbi[A-Za-z]*\\b.*",
        "string_matches": [
            "a bicycle is a great way to commute",
            "bilingual: of knowing two languages fluently",
            "giving birth is a miracle"
        ],
        "string_mismatches": [
            "robin hood is a great movie",
            "you can study in the library",
            "Hibiscus makes delicious tea"
        ]
    },
    "lines using 'oon'": {
        "regex": ".*oon.*",
        "string_matches": [
            "why are we tried in the afternoon?",
            "we went on a babymoon",
            "mushroons are delicious"
        ],
        "string_mismatches": [
            "go on and on",
            "non binary means more than 2 values",
            "only the sun is visible"
        ]
    },
    "lines using words beginning with the letter 'g'": {
        "regex": "(?i).*\bg[A-Za-z]*\b.*",
        "string_matches": [
            "Ghost busters is a good movie",
            "internal growth is important",
            "no Gs in this line"
        ],
        "string_mismatches": [
            "we went to the beach and saw a beautiful sunset",
            "Quick brown fox jumps over a lazy dog.",
            "have a pleasant rest of your day"
        ]
    },
    "lines containing any mention of the word 'code'.": {
        "regex": ".*\\bcode\\b.*",
        "string_matches": [
            "This line of code is perfect.",
            "the code is running smoothly.",
            "there is a bug in this code"
        ],
        "string_mismatches": [
            "color coding is important.",
            "codility is a great platform",
            "computer sience dosen't teach coding"
        ]
    },
    "lines that contain exactly 5 words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){5}",
        "string_matches": [
            "A, B, C, D, E...",
            "This line has no words",
            "The city lies nestled in the valley."
        ],
        "string_mismatches": [
            "he just turned 5",
            "!!!!!",
            "1, 2, 3, 4, 5"
        ]
    },
    "lines where there are two consecutive capital letters": {
        "regex": ".*[A-Z][A-Z].*",
        "string_matches": [
            "the alphabet starts with ABC",
            "I'm a big fan of the NBA", 
            "born in the USA is a great song"
        ],
        "string_mismatches": [
            "Rayn Renolds is a great actor",
            "no caps in this sentence",
            "He saw her across the room and waved."
        ]
    },
    "lines containing a letter": {
        "regex": ".*[A-Za-z].*",
        "string_matches": [
            "this line has no letters",
            "401k is a retirement plan",
            "is 42 always the answer?"
        ],
        "string_mismatches": [
            "1+2= 3",
            "^&#@(^@#",
            " "
        ]
    },
    "lines that contain the word 'orange'.": {
        "regex": ".*\\borange\\b.*",
        "string_matches": [
            "Is this an orange?",
            "orange- both a color and a friut",
            "I have 3 boxes of orange"
        ],
        "string_mismatches": [
            "oranges are healthy",
            "this or that",
            "kiwi is a green fruit"
        ]
    },
    "lines that contain a word of 5 letters or less.": {
        "regex": ".*\\b[A-Za-z]{1,5}\\b.*",
        "string_matches": [
            "Wow!",
            "an endless loop",
            "A big red box"
        ],
        "string_mismatches": [
            "Supercalifragilistic",
            "arielle mermaid, disney princess",
            "name_of_moudle.py"
        ]
    },
    "lines that have words with 'la'.": {
        "regex": ".*\\b[A-Za-z]*la[A-Za-z]*\\b.*",
        "string_matches": [
            "Lalaland won many awards",
            "lakes are huge bodies of water",
            "Did you buy a new tesla?"
        ],
        "string_mismatches": [
            "rattle snakes are dangerous",
            "a lot of people are intolerant to dairy",
            "Lynda helped with the homework."
        ]
    },
    "lines that using the symbol '+' or '-'.": {
        "regex": ".*(\\+|-).*",
        "string_matches": [
            "1 + 2",
            "(a-b)^2 = a^2 - 2ab + b^2",
            "As we can see- the answer is 0"
        ],
        "string_mismatches": [
            "a normal sentece with no special characters",
            "This is Boby's hat",
            "She had a little lamb; its fleece was white as snow."
        ]
    },
    "lines that contain the word 'Hindi'.": {
        "regex": ".*\\bHindi\\b.*",
        "string_matches": [
            "Hindi is believed to be an old language.",
            "can you speak Hindi?",
            "Fiji Hindi is a Hindi dialect spoken in Fiji."
        ],
        "string_mismatches": [
            "hindi, is the standardised variety of the Hindustani language written in the Devanagari script",
            "some languages are hard to learn",
            "The room is very quite"
        ]
    },
    "lines that have at least one capital letter.": {
        "regex": ".*[A-Z].*",
        "string_matches": [
            "This line has a capital letter",
            "the NYC skyline is beautiful",
            "K300 is a spray against bugs"
        ],
        "string_mismatches": [
            "gag's on you my friend!",
            "first names are written in capital letters",
            "rural towns are peaceful"
        ]
    },
    "lines that have at least 3, but not more that 6 words.": {
        "regex": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){3,6}",
        "string_matches": [
            "This line doesn't have enough words",
            "@Hi-there:John;g",
            "This, right here! Now."
        ],
        "string_mismatches": [
            "Short king",
            "do you want to build a snow man?",
            "This is way too many words to match"
        ]
    },
    "lines that contain 'mix' or 'shake'.": {
        "regex": ".*mix.*|.*shake.*",
        "string_matches": [
            "mix & stir everything into the bowl",
            "shake it up!",
            "shake shake shake Sinora"
        ],
        "string_mismatches": [
            "this remix is awesome!",
            "for gods sake relax!",
            " "
        ]
    },
    "lines where 'PQR' is between a number and 'LMNO' in either order": {
        "regex": ".*[0-9].*PQR.*LMNO.*|.*LMNO.*PQR.*[0-9].*",
        "string_matches": [
            "20 PQRs are in LMNO",
            "LMNOs are done? because 4 more PQRs need to be done",
            "2 PQR and 12 LNMO are now on sale!"
        ],
        "string_mismatches": [
            "20 LMNO and PQR are here",
            "LMNO is waiting downstairs.",
            "this has nothing to do with the assignment. "
        ]
    },
    "lines that have words with 7 letters.": {
        "regex": ".*\\b[A-Za-z]{7}\\b.*",
        "string_matches": [
            "understaing the assignment is important",
            "Because of you- Christina Aguilera",
            "the writing is on the wall"
        ],
        "string_mismatches": [
            "this will yeild the answer",
            "is beta1 > beta2?",
            "Lady Gaga is a great artist"
        ]
    },
    "lines containing the letter 'a' before the letter 'b'": {
        "regex": "(?i).*a.*b.*",
        "string_matches": [
            "ABBA is one of the best groups out there today",
            "A little boy climbed the fence",
            "baaa is the sound a lamb makes"
        ],
        "string_mismatches": [
            "baaa is the sound a sheep makes",
            "Bacon is tasty",
            "bro who got you smilin' like that"
        ]
    },
    "lines containing 'h', or 'i'": {
        "regex": "(?i).*(h|i).*",
        "string_matches": [
            "Hi, how are ya?",
            "hamsters are cool",
            "Eddie come back here"
        ],
        "string_mismatches": [
            "yellowstone was dreadful.",
            "Japan better be marvelous",
            "No relevant words."
        ]
    },
    "lines that contain 'ject' or 'pel'": {
        "regex": ".*(ject|pel).*",
        "string_matches": [
            "The subject is interesting",
            "We had to expel the student",
            "this object looks alarming"
        ],
        "string_mismatches": [
            "we will show that this example is incorrect",
            "first lets look at the equation- 1 + 1 = 2",
            "hey my name is Aric"
        ]
    },
    "lines that carry the word 'Jim' located in between 'Stacks' and 'Slim' in either order.": {
        "regex": ".*Stacks.*\\bJim\\b.*Slim.*|.*Slim.*\\bJim\\b.*Stacks.*",
        "string_matches": [
            "Stacks and then Jim walked toward Slim.",
            "Slim Jim is here Stacks",
            "Stacks Jim and Slim"
        ],
        "string_mismatches": [
            "Jimmy walked between Slim and Stacks",
            "Stacks talked to Slim about Jim",
            "I'm Slim shady- Eminem"
        ]
    },
    "lines using at least 5 'd'": {
        "regex": "(.*d.*){5,}",
        "string_matches": [
            "donald duck is digging dirt.",
            "Nividia is a mutibillion dollor organization and donates to dog shelters",
            "dance the night away and get drunk and dail your phone to you know who"
        ],
        "string_mismatches": [
            "Donald duck is an animal",
            "not enough d's here",
            "'d'*3 = ddd"
        ]
    },
    "lines that contain at least 2 digits.": {
        "regex": "(.*[0-9].*){2,}",
        "string_matches": [
            "0-1-1-2-3-5 is the start of the fibonacci seriess",
            "the legal age in the USA is 21",
            "fGKJGF843s is a strong passowrd"
        ],
        "string_mismatches": [
            "nineteen is the legal age in the UK",
            "No numbers or digits in this line",
            "a single digit like 9 isn't enough to match"
        ]
    },
    "lines that end containing the letter 'z'.": {
        "regex": ".*z",
        "string_matches": [
            "I got such a buzz",
            "in the old days a soda was called a fizz",
            "bees make this sound- zzzzzzzzzzz"
        ],
        "string_mismatches": [
            "The quick brown fox jumps over a lazy fox.",
            "how big is a gigahertz?",
            "No Z's here"
        ]
    },
    "lines which have at least three words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){3,}",
        "string_matches": [
            "lines which have three words",
            "Nothing intersting to look at",
            "Hi, there! How are you?"
        ],
        "string_mismatches": [
            "Hi!",
            "123 @#$%", 
            "example@gmail.com"
        ]
    },
    "lines with 'sec' before 'mun'.": {
        "regex": ".*sec.*mun.*",
        "string_matches": [
            "They built a section of the amusement park for kids",
            "secret communication is essential",
            "the insect museum had rare specimens from around the world"
        ],
        "string_mismatches": [
            "The municipality sent out a notice",
            "This is monumental",
            "that section was damaged"
        ]
    },
    "lines that have two or more words ending in 'a'.": {
        "regex": ".*(.*\\b[A-Za-z]*a\\b.*){2}.*",
        "string_matches": [
            "Alphaba and Glinda are witches",
            "A tuba and a viola are in the orchestra.",
            "She saw a koala and a pandas at the zoo, and we went to eat pizza and pasta"
        ],
        "string_mismatches": [
            "When is the new album relese?",
            "Baby Showers are a beautiful tradition",
            "No words ending in 'a'."
        ]
    },
    "lines that have exatcly 6 words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){6}",
        "string_matches": [
            "He might need another ski vacation",
            "A playful puppy ran towards me",
            "is this item still on sale ?"
        ],
        "string_mismatches": [
            "sqrt of 144 is 12",
            "some languages are very hard to learn",
            "HOTTOGO- Chappel Rown"
        ]
    },
    "lines containing the letters 'k', or 'l'": {
        "regex": "(?i).*(k|l).*",
        "string_matches": [
            "KLM has exelant air crafts",
            "Look at the time we have to go!",
            "lol means laughing out loud"
        ],
        "string_mismatches": [
            "can't we just get this over with",
            "I was so tired yesterday",
            "this document is way too short"
        ]
    },
    "lines that contain words ending with 'mae'.": {
        "regex": ".*\\b[A-Za-z]*mae\\b.*",
        "string_matches": [
            "fmae is an acronym for- Following Amendment Authorized Effective",
            "Here is another example with a word that ends in mae: blomae.",
            "This has no word ending with 'mae'"
        ],
        "string_mismatches": [
            "literally any sentence",
            "betty is ugly",
            "Edamame is delicious"
        ]
    },
    "lines that contain words starting with the letter'h'.": {
        "regex": ".*\\b[h|H][A-Za-z]*\\b.*",
        "string_matches": [
            "They're such a happy family",
            "hallucinations are where you hear things that appear to be real but only exist in your mind ",
            "Hello? Is anybody there?"
        ],
        "string_mismatches": [
            "what else could you possibly say?",
            "this is your little brother",
            "For the past 33 years I've only eaten friuts."
        ]
    },
    "lines where the  word 'Homer' precedes the word 'Odyssey'": {
        "regex": ".*\\bHomer\\b.*\\bOdyssey\\b.*",
        "string_matches": [
            "in literature class we studied Homer before diving into the Odyssey",
            "After learning about Homer , the Odyssey made much more sense",
            "Homer wrote the Odyssey long ago."
        ],
        "string_mismatches": [
            "The Odyssey is often attributed to Homer",
            "this has nothing to do with the Odyssey",
            "Homer Simpson is a fictional character"
        ]
    },
    "lines using the word 'hero'.": {
        "regex": ".*\\bhero\\b.*",
        "string_matches": [
            "The hero saved the day.",
            "Our hero is brave and strong.",
            "Is this a journey fitted for a hero?"
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a simple sentence.",
            "Invincible is a superhero"
        ]
    },
    "lines that have words starting with 'kai'.": {
        "regex": ".*\\bkai[A-Za-z]*\\b.*",
        "string_matches": [
            "whats does kaiser mean?",
            "kaiseki is a highly ritual Japanese meal",
            "mohammad kaif is is a former Indian cricketer."
        ],
        "string_mismatches": [
            "I'm hungry so I made toast.",
            "11:11 is a spiritual time",
            "There was a huge earthquake in Thailand"
        ]
    },
    "lines that use the letter 'a' or 'b' before words ending with 'er'.": {
        "regex": ".*(A|a|b|B).*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The baker came over",
            "She is a better leader",
            "Bob is a clever player"
        ],
        "string_mismatches": [
            "He is a great king",
            "Tom is a good guy",
            "the ER is full of people"
        ]
    },
    "lines starting with 'abc'": {
        "regex": "abc.*",
        "string_matches": [
            "abc@gmail.com",
            "abc.. whats next?",
            "abcdefg, I have to go"
        ],
        "string_mismatches": [
            "a, b and c are the first 3 letters of the alphabet",
            "No stand alone letters in this line",
            "what comes after abc?"
        ]
    },
    "lines using three character words begining with the letters 'CE'.": {
        "regex": ".*\\bCE[A-Za-z]\\b.*",
        "string_matches": [
            "CEO",
            "CEA",
            "CEl"
        ],
        "string_mismatches": [
            "The Ceo of apple was steve jobs.",
            "sombody is watching me",
            "CEOOOOO"
        ]
    },
    "lines using 'abc' after 'def'": {
        "regex": ".*def.*abc.*",
        "string_matches": [
            "defabc",
            "abcdefabc",
            "def abc"
        ],
        "string_mismatches": [
            "def",
            "abc def",
            "xyzabc"
        ]
    },
    "lines which feature the word 'hairy'.": {
        "regex": ".*\\bhairy\\b.*",
        "string_matches": [
            "this is one hairy dog",
            "The hairy man smiled.",
            "My hairy legs need to be shaved"
        ],
        "string_mismatches": [
            "I cut off a lot of my hair",
            "Hairless cats are weird",
            "My legs are cold"
        ]
    },
    "lines containing the word 'crack'.": {
        "regex": ".*\\bcrack\\b.*",
        "string_matches": [
            "crack pies are a 10/10",
            "The wall began to crack",
            "The detective worked very hard to crack the case"
        ],
        "string_mismatches": [
            "crackers can be a nice alternative to bread",
            "whats cracken' in the New Orleans",
            "Lynda helped with the homework."
        ]
    },
    "lines that have at least three 'j'.": {
        "regex": "(.*j.*){3}",
        "string_matches": [
            "jumping jocks are going to jupiter",
            "joe and jane ate jam",
            "Elijah was injured saving john"
        ],
        "string_mismatches": [
            "being agile is a good trait",
            "The chair is broken.",
            "87 is divisible by 3"
        ]
    },
    "lines that have the sting 'turn' inside the line": {
        "regex": ".*turn.*",
        "string_matches": [
            "turn around, every now and then i feel a little bit lonly.",
            "turing on a red light is a felony",
            "he turned right away"
        ],
        "string_mismatches": [
            "I'm implementing the cocurrent evaluation",
            "Chat GPT just released its new update",
            "we went to a party and it was so fun!"
        ]
    },
    "lines using 'ghi' after 'jkl'": {
        "regex": ".*jkl.*ghi.*",
        "string_matches": [
            "jkl? ghi!",
            "ghijkl and then ghi",
            "jklghi"
        ],
        "string_mismatches": [
            "ghijkl",
            "Jkl without ghi",
            "only ghi"
        ]
    },
    "lines using 'd' in the middle of a word.": {
        "regex": ".*\\b[A-Za-z]+d[A-Za-z]+\\b.*",
        "string_matches": [
            "he is endorsed by the whole city",
            "She is adored by everybody",
            "P diddy is definitely going to jail"
        ],
        "string_mismatches": [
            "donald duck is a cartoon character",
            "me and my friend went skiing",
            "kittins are the sweetes"
        ]
    },
    "lines using 5 the letter 'd'": {
        "regex": "(.*(d|D).*){5}",
        "string_matches": [
            "dddDddddd",
            "d d d d d",
            "Daisy Daniels is adorable and everyone thinks she is devine"
        ],
        "string_mismatches": [
            "noboday knows who they are",
            "Do you want to build a snowman?",
            "I NEED COFFEE"
        ]
    },
    "lines with capital letters": {
        "regex": ".*[A-Z].*",
        "string_matches": [
            "I NEED COFFEE",
            "No captial letters here.",
            "I've never been to NYC"
        ],
        "string_mismatches": [
            "lol this is so funny",
            "yellow flowers are calmming",
            "we both got that text message"
        ]
    },
    "lines containing 'e', or 'f'": {
        "regex": ".*(e|f).*",
        "string_matches": [
            "factories are an idustrial facility",
            "Are there sentences with no 'e'?",
            "its effect on the world was huge"
        ],
        "string_mismatches": [
            "dogs can bark loudly.",
            "Abby road is an album",
            "gamma is a math notation"
        ]
    },
    "lines using a 5 letter sequence": {
        "regex": ".*[A-Za-z]{5}.*",
        "string_matches": [
            "Jaffa is a beatiful place to visit",
            "short words don't have more than 5 letters",
            "Sequences can be infinite."
        ],
        "string_mismatches": [
            "Hi, I'm Bob.",
            "15/3 = 5",
            "cats can't bark"
        ]
    },
    "lines which contain a word starting with 'ch'": {
        "regex": ".*\\bch[A-Za-z]*\\b.*",
        "string_matches": [
            "The charming prince doesn't save Snowhite",
            "chilly weather with low temps coming ahead",
            "chocolate is the best thing"
        ],
        "string_mismatches": [
            "Hello world!",
            "yesterday was such a summer day",
            "winter is coming"
        ]
    },
    "lines utilizing the word 'law'.": {
        "regex": ".*.*\\blaw\\b.*",
        "string_matches": [
            "The law requires all citizens to pay taxes.",
            "Natural law dictates that we should treat each other with kindness.",
            "It's against the law to steal."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a sample sentence with no legal terms.",
            "A sentence without any reference to laws or statutes"
        ]
    },
    "lines that have the number '44'.": {
        "regex": ".*44.*",
        "string_matches": [
            "This line has the number 44 in it.",
            "44/2 = 22.",
            "Which country has a +44 code?"
        ],
        "string_mismatches": [
            "a setence with no numbers",
            "forty four is bigger than twenty.",
            "4+4 = 8"
        ]
    },
    "lines that contain the letter 'a' followed by a vowel.": {
        "regex": ".*(A|a).*[AEIOUaeiou].*",
        "string_matches": [
            "August got its name from the ancient Romans who named this month for Augustus Caesar",
            "this house is very aesthetic",
            "Air force 1 are good shoes"
        ],
        "string_mismatches": [
            "Bears are dangerous animals",
            "Annie has 3 sisters",
            "the bowling ally is such a fun place"
        ]
    },
    "lines which have at least 7 numbers.": {
        "regex": ".*(.*[0-9].*){7}.*",
        "string_matches": [
            "I was born on 01/01/2000",
            "Room 101, Floor 5, Zip 90210",
            "my number is 97254-8699419"
        ],
        "string_mismatches": [
            "the code is: 56842t",
            "strawberry fields forever",
            "the oldest man alive is 117 yeas old"
        ]
    },
    "lines which end with 'you', but we can allow punctuation marks": {
        "regex": ".*\\byou\\b[.!?\"]?$",
        "string_matches": [
            "Think of me, will you?",
            "Thank you!!",
            "Look, I brought this for you"
        ],
        "string_mismatches": [
            "It's a beautiful day, isn't it?",
            "How are you holding up?",
            "You ready to do this?"
        ]
    },
    "lines that contain a digit.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "1 number is enough",
            "2nd place is just as good",
            "I have 4 siblings"
        ],
        "string_mismatches": [
            "What date is passover in 2026?",
            "moving day isn't easy",
            "I like to sit on the floor."
        ]
    },
    "lines using a word having the string 'der'": {
        "regex": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*",
        "string_matches": [
            "'Under The Sea' is a song from a Disney movie ",
            "The dermatologist took a look and there is nothing to worry about",
            "kindergarten is the last step before first grade"
        ],
        "string_mismatches": [
            "why does 1+1 = 2?",
            "his grandmother was a holocaust servier",
            "water is the essence of life"
        ]
    },
    "lines containing a word": {
        "regex": ".*\\b[A-Za-z]+\\b.*",
        "string_matches": [
            "A word",
            "3 < 4, QED.",
            "this is a regular sentence"
        ],
        "string_mismatches": [
            "&&$#(!($%",
            "",
            "18*5-34 = 56"
        ]
    },
    "lines that contain words ending in 'n'": {
        "regex": ".*\\b[A-Za-z]*n\\b.*",
        "string_matches": [
            "Open the box!",
            "Notre-Dame is a cathedral in Paris",
            "the plain truth is I don't like you"
        ],
        "string_mismatches": [
            "I have so many plans for the weekend",
            "medieval times had a lot of plages",
            "food preping is extremly important"
        ]
    },
    "lines that have the string 'eye'": {
        "regex": ".*eye.*",
        "string_matches": [
            "My eyelids hurt",
            "he is itchying his eyes all morning",
            "The eye of the storm"
        ],
        "string_mismatches": [
            "We are yearning for better days",
            "yesterday all my troubles seem so far away",
            "I lost my door key again."
        ]
    },
    "lines that contain three letter words in them.": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "The dog ran.",
            "His cat sat on the mat.",
            "Is it hot?"
        ],
        "string_mismatches": [
            "These aren't longer strings.",
            "Supercalifragilistic is more than 3 words",
            "Aladin is a great movie"
        ]
    },
    "lines that contain five letter words.": {
        "regex": ".*\\b[A-Za-z]{5}\\b.*",
        "string_matches": [
            "Santa comes down through the chimney",
            "ah ah ah ah staying alive staying alive",
            "I'm going home."
        ],
        "string_mismatches": [
            "Dreams is a record by Fleetwood Mac",
            "my gloves became so tiny",
            "Easter is almost here"
        ]
    },
    "lines which start with a number.": {
        "regex": "[0-9].*",
        "string_matches": [
            "3 is a song by Britney Spears",
            "12/4 = 3",
            "17 again stars Zac Efron"
        ],
        "string_mismatches": [
            "You're 2 years older than my sister",
            "this equation- 2^2 = 3 is incorrect",
            "Lalapaloza is a festival I need to go to"
        ]
    },
    "lines that start with a 'z' and end with an 'a'.": {
        "regex": "z.*a",
        "string_matches": [
            "zebras are studied in academia",
            "z--__--a",
            "zoology also studies the Panda"
        ],
        "string_mismatches": [
            "a zen garden is a place of peace",
            "zebra is a horse",
            "all animals are equal, but some are more equal than others"
        ]
    },
    "lines that match 'billy' or 'bob'.": {
        "regex": ".*(billy|bob).*",
        "string_matches": [
            "billybob is a unique name",
            "Hi bob how are you?", 
            "bob and billy are best friends"
        ],
        "string_mismatches": [
            "Bill is not short for Billy",
            "Bob is a common name",
            "alice in wonderland is a great book"
        ]
    },
    "lines which contain five or more 'y'": {
        "regex": "(.*y.*){5,}",
        "string_matches": [
            "yyyyyyyyy",
            "yodel ay yodel ay yodel ay hee hoo",
            "ayyyyyy yo whats up?"
        ],
        "string_mismatches": [
            "why why why why is this happening?",
            "I hate apples",
            "I love orange juice"
        ]
    },
    "lines that include words starting with 'ne'.": {
        "regex": ".*\\bne[A-Za-z]*\\b.*",
        "string_matches": [
            "nebula is a cloud of gas and dust in space",
            "Is this really necessary?",
            "the element neon is used in neon lights"
        ],
        "string_mismatches": [
            "The nobel prize is awarded every year",
            "Nana was the best grandma",
            "you are the bane of my existence"
        ]
    },
    "lines containing words that start with 'x'": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "She studied the xenon gas properties for her chemistry project",
            "the x-ray revealed a tiny fracture in his wrist after the fall",
            "xenophobia is a fear of the unknown"
        ],
        "string_mismatches": [
            "A squirrel stole my sandwich while I wasn't looking",
            "He accidentally sent a love letter to his dentist instead of his crush",
            "a pigeon wearing a tiny hat strutted confidently across the park"
        ]
    },
    "lines containing 'ge' or 'an' before 'ger' or 'tra'": {
        "regex": ".*(ge|an).*(ger|tra).*",
        "string_matches": [
            "The explorer carefully examined the geological traces left by the lava flow",
            "she admired the antique train set displayed in the old toy store window",
            "Please let me talk to your manager"
        ],
        "string_mismatches": [
            "my cat jumped into the fridge and refused to come out until bribed with tuna",
            "I can't believe I forgot my umbrella on such a rainy day",
            "the dog barked at the mailman and chased him down the street"
        ]
    },
    "lines that end with 'gh'": {
        "regex": ".*gh",
        "string_matches": [
            "That was tough",
            "she tried not to laugh",
            "He sighed and whispered- I have had enough"
        ],
        "string_mismatches": [
            "just some random text",
            "he clenched his fists, trying to stay calm through the chaos",
            "we both got that text message"
        ]
    },
    "lines which contain 'sorry'": {
        "regex": ".*sorry.*",
        "string_matches": [
            "being sorry is a sign of maturity",
            "I'm sorry for the inconvenience",
            "Please accept my apologies, I am sorry"
        ],
        "string_mismatches": [
            "This candle flickerd in the wind",
            "What a wonderful day",
            "sorroes are a type of flower"
        ]
    },
    "lines that start with 'far'": {
        "regex": "far.*",
        "string_matches": [
            "farmer John is known for his organic produce",
            "far too many cookies were eaten before the guests even arrived",
            "farther than anyone expected, the journey took us to the edge of the world"
        ],
        "string_mismatches": [
            "further investigation is needed",
            "fast enough to catch the bus",
            "she was facinated by the stars"
        ]
    },
    "lines using words that end in 'y' or 'i'.": {
        "regex": ".*\\b[A-Za-z]*(y|i)\\b.*",
        "string_matches": [
            "this happy family is so cute",
            "Funny story, I was just thinking about you",
            "Try this- it might be good for you"
        ],
        "string_mismatches": [
            "A paper airplane landed in someones coffee cup",
            "The moon looked like a glowing coin.",
            "She danced barefoot on the grass"
        ]
    },
    "lines containing words that start with 'th'": {
        "regex": ".*\\bth[A-Za-z]*\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "they went to the store",
            "this is a sentence that starts with 'th'"
        ],
        "string_mismatches": [
            "apple banana cherry",
            "a b c",
            "a test line"
        ]
    },
    "lines that contain 'ig' or 'physics' before 'nobel'.": {
        "regex": ".*(ig|physics).*nobel.*",
        "string_matches": [
            "being a nobel prize winner is a great honor",
            "Nightingale's nobel prediction was spot on",
            "physics is a field of study that has produced many nobel laureates"
        ],
        "string_mismatches": [
            "nobel prize winners are often recognized for their groundbreaking work",
            "Nobel winning physics concepts are great",
            "only a number of people won more than 1 nobel prize"
        ]
    },
    "lines that contain the text 'NOW'": {
        "regex": ".*NOW.*",
        "string_matches": [
            "NOW is the time!",
            "KNOWING is power",
            "Act NOW"
        ],
        "string_mismatches": [
            "we need to go now",
            "knowing what to do is important",
            "this has no context with the assignment"
        ]
    },
    "lines that contain the text 'hello'": {
        "regex": ".*hello.*",
        "string_matches": [
            "hello world!",
            "hello to everyone here",
            "Say hello buddy"
        ],
        "string_mismatches": [
            "healing is a process",
            "greetings to all",
            "He wore mismatched socks as a quiet act of rebellion"
        ]
    },
    "lines that have words ending with 'ge'.": {
        "regex": ".*\\b[A-Za-z]*ge\\b.*",
        "string_matches": [
            "the old bridge creaked as they crossed it under the moonlight",
            "He stored the tools in the garage before the storm rolled in",
            "She placed the cheese carefully on the platter's edge"
        ],
        "string_mismatches": [
            "a jellybean fell out of his pocket during the job interview",
            "She named her cactus 'Captain Spikey'.",
            "the toaster started playing music, and nobody questioned it"
        ]
    },
    "Look for any line with the '@' symbol.": {
        "regex": ".*\\@.*",
        "string_matches": [
            "this line has an @ symbol",
            "example123@gmail.com",
            "hit me up @ my home number"
        ],
        "string_mismatches": [
            "I went to the store to buy some fresh vegetables",
            "the kids played soccer in the park until it got dark",
            "He made a cup of coffee and sat down to read the news"
        ]
    },
    "lines using an instance of 'itch'": {
        "regex": ".*itch.*",
        "string_matches": [
            "my pants are so itchy",
            "A scratch and an itch are not the same",
            "I have an itch on my back"
        ],
        "string_mismatches": [
            "I love the beach",
            "The sun is shining brightly",
            "my cat is sleeping peacefully in the sofa"
        ]
    },
    "lines containing three vowels": {
        "regex": "(.*[AEIOUaeiou].*){3}",
        "string_matches": [
            "The elephant wandered through the tall grass",
            "Olivia baked a delicious apple pie for dessert.",
            "He opened the window to let in the evening breeze"
        ],
        "string_mismatches": [
            "Shh, it's dark",
            "Dog",
            "its hot"
        ]
    },
    "lines that have more than 6 numbers.": {
        "regex": "(.*[0-9].*){7,}",
        "string_matches": [
            "052-123-4567 is an israeli phone number",
            "the code is: 01234567",
            "people born in 1925 are now 100 years old"
        ],
        "string_mismatches": [
            "the average socre is 85",
            "this line has no numbers",
            "I cannot believe he is already 18"
        ]
    },
    "lines beginning with 'Therefore'": {
        "regex": "Therefore.*",
        "string_matches": [
            "Therefore, the answer is 42.",
            "Therefore, I conclude that...",
            "Therefore, we can proceed with the experiment."
        ],
        "string_mismatches": [
            "The answer is 42.",
            "I conclude that its not true, therefore...",
            "We can proceed with the experiment."
        ]
    },
    "lines that have the word 'love' preceeding the word 'you'.": {
        "regex": ".*\\blove\\b.*\\byou\\b.*",
        "string_matches": [
            "I love you",
            "I love the fact that you care so much",
            "The love I have for you is immeasurable"
        ],
        "string_mismatches": [
            "He loves that team so much",
            "you love apples",
            "the flowers are lovely"
        ]
    },
    "lines which contain a 3 letter string starting with a": {
        "regex": ".*(a[A-Za-z]{2}).*",
        "string_matches": [
            "The apple pie was delicious",
            "academia is a field of study",
            "axel was such a great skater"
        ],
        "string_mismatches": [
            "I was so hungry",
            "The cat sat on the mat.",
            "Dolphins extremely intelligent"
        ]
    },
    "lines starting with a 'T'.": {
        "regex": "T.*",
        "string_matches": [
            "This is a test string.",
            "Tomorrow is another day.",
            "Tenacious tigers terrorize territories."
        ],
        "string_mismatches": [
            "till death do us part",
            "A line that does not start with T",
            "Another line without a leading T"
        ]
    },
    "lines that contain the letters 'ba'.": {
        "regex": ".*ba.*",
        "string_matches": [
            "banana is a fruit",
            "Basketball is a fun sport",
            "I love playing badminton with my friends"
        ],
        "string_mismatches": [
            "It's a beautiful day outside",
            "I'm walking on sunshine",
            "You know what they say about the weather"
        ]
    },
    "lines that are composed of 4 or more words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){4,}",
        "string_matches": [
            "This is a valid sentence with four words",
            "the quick brown fox jumps over the lazy dog",
            "please make sure to follow the instructions carefully"
        ],
        "string_mismatches": [
            "Lets go!",
            "Are you coming?",
            "Hello????"
        ]
    },
    "lines utilizing words starting with 'b'.": {
        "regex": ".*\\bb[A-Za-z]*\\b.*",
        "string_matches": [
            "Be bold, be brave, be brilliant.",
            "Birds build beautiful nests in big branches.",
            "Below the bridge, boats bob gently on the bay"
        ],
        "string_mismatches": [
            "Clever cats climb trees with ease.",
            "Amazing athletes achieve great feats.",
            "Incredible inventions change the world."
        ]
    },
    "lines that use the word 'boom' followed by words starting with 'ka'": {
        "regex": ".*\\bboom\\b.*\\bka[A-Za-z]*\\b.*",
        "string_matches": [
            "boom kapow",
            "boom ka-ching",
            "boom kablam"
        ],
        "string_mismatches": [
            "Kaboom!",
            "bang bang he shot me down",
            "kangaroos are a unique species"
        ]
    },
    "lines that end in a number": {
        "regex": ".*[0-9]",
        "string_matches": [
            "Here take my number- 123456789",
            "12 - 34 = -22",
            "want to go outside? Yea that sound gr8"
        ],
        "string_mismatches": [
            "I bought 3 pounds of apples",
            "2000 was 25 years ago",
            "going to NYC is a dream come true"
        ]
    },
    "lines that contain at least one word starting with 'q'.": {
        "regex": ".*\\bq[A-Za-z]*\\b.*",
        "string_matches": [
            "Quizzical expressions are quite common.",
            "Thata question about quantum physics was challenging.",
            "The queen's quest for knowledge is admirable."
        ],
        "string_mismatches": [
            "Let's test this sentence against the regex.",
            "he forgot his wallet but remembered the snacks.",
            "The kitten chased a shadow across the living room floor."
        ]
    },
    "lines that have 'twist'": {
        "regex": ".*twist.*",
        "string_matches": [
            "That movie had a huge twist!",
            "twisted vines covered the wall",
            "she twisted her ankle"
        ],
        "string_mismatches": [
            "This is surprising news",
            "Twister is a fun game",
            "Just another test line"
        ]
    },
    "lines containing words that start with and end with 'xyz'": {
        "regex": "xyz(.*xyz)?",
        "string_matches": [
            "abc vs xyz",
            "xyzabcxyz",
            "xyzxyzxyz"
        ],
        "string_mismatches": [
            "abc",
            "abcxyz",
            "xyzyx"
        ]
    },
    "lines that contain words ending with 'la'.": {
        "regex": ".*\\b[A-Za-z]*la\\b.*",
        "string_matches": [
            "The koala bear is native to Australia",
            "She sang acapella and danced to the samba",
            "the highlight of the night was the opera gala"
        ],
        "string_mismatches": [
            "The glass is half full",
            "He yelled loudly in the hallway.",
            "this is a calculation example."
        ]
    },
    "lines that contain at least one number.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "2001 was a horrific year",
            "example_1234@gmail.com is an example email",
            "The 3rd place winner was ecstatic"
        ],
        "string_mismatches": [
            "No digits or numbers in this sentence",
            "Just some text",
            "the coffee machine beeped twice before spilling foam everywhere"
        ]
    },
    "lines using 'ent' or 'ong'": {
        "regex": ".*(ent|ong).*",
        "string_matches": [
            "employment is a key issue",
            "this ongoing research is very important",
            "engagement is crucial for success"
        ],
        "string_mismatches": [
            "a gentle breeze carried the scent of jasmine through the window",
            "She found an old map tucked inside the dusty library book",
            "The dog barked excitedly at its own reflection in the mirror"
        ]
    },
    "lines containing at least one word that contains at least one vowel (a,e,i,o,u) in any case.": {
        "regex": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*",
        "string_matches": [
            "The cat sat",
            "eating an apple",
            "UPPER case VOWELS",
            "mixed vOwEls here",
            "single vowel word"
        ],
        "string_mismatches": [
            "rhythm",
            "crypt",
            "myth",
            "gym",
            "sync",
            "psych"
        ]
    },
    "lines containing at least one word that ends with the letter 'y' (preceded by any letters)": {
        "regex": ".*\\b[A-Za-z]*y\\b.*",
        "string_matches": [
            "The happy dog",
            "She told a funny story",
            "My puppy is sleepy",
            "The sky is cloudy today",
            "They study biology"
        ],
        "string_mismatches": [
            "yellow paint",
            "beyond the horizon",
            "your cat",
            "yester morning",
            "The sun is bright"
        ]
    },
    "lines that contain at least two occurrences of the sequence '19'": {
        "regex": "(.*19.*){2}",
        "string_matches": [
            "19abc19",
            "1919",
            "abc19def19ghi",
            "The number 19 appears twice in 19",
            "19 is here and here is 19 again"
        ],
        "string_mismatches": [
            "19 only appears once",
            "No 19 here at all",
            "Just some numbers 12345",
            "Almost but not quite 18 and 20"
        ]
    },
    "lines that contain 2 or more uppercase letters anywhere in the line": {
        "regex": "(.*[A-Z].*){2,}",
        "string_matches": [
            "MultipleCapitals",
            "MoreThanTwo",
            "ACoupleMore",
            "The Quick Brown Fox",
            "TWO capitals HERE"
        ],
        "string_mismatches": [
            "lowercase only",
            "Only one capital",
            "another lowercase example"
        ]
    },
    "lines containing a consecutive sequence of exactly 6 letters": {
        "regex": ".*[A-Za-z]{6}.*",
        "string_matches": [
            "abcdef",
            "uvwxyzabcdef",
            "The string LETTER has 6 letters",
            "monkey123banana456"
        ],
        "string_mismatches": [
            "abcde",
            "12345",
            "short",
            "A B C D E F"
        ]
    },
    "lines that contain the lowercase letter 'c' at least twice": {
        "regex": "(.*c.*){2,}",
        "string_matches": [
            "access",
            "succeed",
            "concept",
            "circle",
            "circus",
            "chocolate cake",
            "circus clown"
        ],
        "string_mismatches": [
            "cat",
            "car",
            "computer",
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain at least one word that ends with the lowercase letter 'i' as its last character": {
        "regex": ".*\\b[A-Za-z]*i\\b.*",
        "string_matches": [
            "veni vidi vici",
            "I took a taxi home",
            "The sushi was delicious",
            "Macaroni and cheese",
            "The kiwi is sweet"
        ],
        "string_mismatches": [
            "This word ends in pie",
            "The word inside has",
            "Words like skiing don't count",
            "Neither do words like iris",
            "Or words like india"
        ]
    },
    "lines containing the exact word 'the' (case-insensitive), not as part of other words": {
        "regex": ".*\\b[Tt][Hh][Ee]\\b.*",
        "string_matches": [
            "The cat sat on the mat",
            "I saw THE movie yesterday",
            "Look at the stars"
        ],
        "string_mismatches": [
            "Words like 'there' don't match",
            "Neither does 'other' or 'these'",
            "Thermal is not a match"
        ]
    },
    "lines that contain the word 'trolls' (all lowercase, with spaces before and after)": {
        "regex": ".*\\strolls\\s.*",
        "string_matches": [
            "Beware of trolls under the bridge",
            "Three trolls guarded the cave",
            "The trolls were hiding",
            "I saw trolls yesterday",
            "Many trolls live here"
        ],
        "string_mismatches": [
            "The TROLLS were scary",
            "He was trolling online",
            "The word Trolls with capital T",
            "trollsbridge isn't valid",
            "This_trolls_fails",
            "No matches without spaces"
        ]
    },
    "lines that begin with the word 'the' (all lowercase, must be first word)": {
        "regex": "\\bthe\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "the earth is round",
            "the sun shines bright today"
        ],
        "string_mismatches": [
            "The quick brown fox",
            "see the dog run",
            "there is no match",
            "another the word here"
        ]
    },
    "lines containing one or more words that have 'ri' anywhere within the word": {
        "regex": ".*\\b[A-Za-z]*ri[A-Za-z]*\\b.*",
        "string_matches": [
            "The price is right",
            "She went on a trip yesterday",
            "I will write a letter",
            "The bright sun shines",
            "My friend is married"
        ],
        "string_mismatches": [
            "The cat and dog played",
            "Looking at the stars",
            "Running in circles",
            "The rain falls down",
            "Singing a melody"
        ]
    },
    "lines containing at least 3 vowels (a,e,i,o,u) in any order": {
        "regex": "(.*[AEIOUaeiou].*){3,}",
        "string_matches": [
            "The education system",
            "What an inconvenience",
            "The audiovisual presentation",
            "Beautiful morning",
            "Outrageous behavior"
        ],
        "string_mismatches": [
            "The dry sky",
            "My cat naps",
            "Cry now",
            "Myth"
        ]
    },
    "lines containing at least 3 occurrences of the sequence 'sw'": {
        "regex": ".*(.*sw.*){3}.*",
        "string_matches": [
            "swswsw is valid",
            "The sw appears sw here sw too",
            "sw test sw case sw",
            "swswswsw has four",
            "kswkswsw matches"
        ],
        "string_mismatches": [
            "Only sw once",
            "sw appears sw twice",
            "No sw here at all",
            "sssswww doesn't count"
        ]
    },
    "lines containing one or more words that begin with 'no' followed by letters": {
        "regex": ".*\\bno[A-Za-z]*\\b.*",
        "string_matches": [
            "There is no way out",
            "I see nobody home today",
            "It's a non-stop flight",
            "The noise was loud",
            "She noticed something"
        ],
        "string_mismatches": [
            "Say yes way instead",
            "Just stop here",
            "Know the answer",
            "The word snow doesn't count"
        ]
    },
    "lines that contain the exact phrase 'this is it' (case sensitive)": {
        "regex": ".*this is it.*",
        "string_matches": [
            "this is it",
            "this is it, I tell you!",
            "hey this is it now",
            "well this is it folks"
        ],
        "string_mismatches": [
            "this is not it",
            "that is it",
            "This Is It",
            "THIS IS IT"
        ]
    },
    "lines that begin with the lowercase word 'the' followed by any text": {
        "regex": "(the.*).*",
        "string_matches": [
            "the quick brown rabbit",
            "the rain in spain",
            "the sun is shining",
            "the end of time"
        ],
        "string_mismatches": [
            "a quick brown fox",
            "The sun rises",
            "that is not correct"
        ]
    },
    "lines containing the sequence 'din' that appears after either the letter 'e' or the sequence 'ky'": {
        "regex": ".*(e|ky).*din.*",
        "string_matches": [
            "e din",
            "ky din",
            "ke din",
            "kyoto din",
            "elysian din"
        ],
        "string_mismatches": [
            "din e",
            "din ky",
            "a din",
            "my dinner",
            "garden inside"
        ]
    },
    "lines containing at least one digit '7' anywhere in the text": {
        "regex": ".*7.*",
        "string_matches": [
            "7up",
            "This line has a 7 in it",
            "Another line with 7",
            "777 lucky numbers"
        ],
        "string_mismatches": [
            "abc",
            "eight nine ten",
            "no numbers here",
            "only text"
        ]
    },
    "lines containing at least 6 characters (including spaces and punctuation)": {
        "regex": ".*.{6}.*",
        "string_matches": [
            "longer",
            "string",
            "another",
            "example",
            "matches"
        ],
        "string_mismatches": [
            "short",
            "a",
            "b",
            "c",
            "d"
        ]
    },
    "lines containing the standalone word 'zoo' (not part of another word)": {
        "regex": ".*\\bzoo\\b.*",
        "string_matches": [
            "The zoo is a fun place to visit.",
            "I went to the zoo yesterday and saw a monkey.",
            "My favorite animal at the zoo is the elephant.",
            "Let's go to the zoo!"
        ],
        "string_mismatches": [
            "zoology is interesting",
            "The zoologist works hard",
            "zooming past quickly",
            "The word zoomed doesn't count"
        ]
    },
    "lines containing the letter sequence 'ei' anywhere in the text": {
        "regex": ".*ei.*",
        "string_matches": [
            "weight",
            "neighbor",
            "height",
            "their",
            "receive"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "example",
            "test",
            "ie sequence"
        ]
    },
    "lines containing two or more space-separated words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){2,}",
        "string_matches": [
            "a sentence",
            "multiple words here",
            "this is a line",
            "two words",
            "many different words here"
        ],
        "string_mismatches": [
            "word",
            "anotherword",
            "123",
            "single",
            "nospaceshere"
        ]
    },
    "lines containing either the standalone word 'run' or 'hat' (not as part of other words)": {
        "regex": ".*\\b(run|hat)\\b.*",
        "string_matches": [
            "I want to run.",
            "He wore a hat.",
            "Let's run for the hat!",
            "The hat is red",
            "They run fast"
        ],
        "string_mismatches": [
            "running is fun",
            "hats are nice",
            "hatred",
            "runner",
            "hatbox"
        ]
    },
    "lines containing at least two different words that are exactly 5 letters long": {
        "regex": "(.*\\b[A-Za-z]{5}\\b.*){2,}",
        "string_matches": [
            "hello world",
            "money talks",
            "happy smile today",
            "green brown black",
            "sweet taste fresh"
        ],
        "string_mismatches": [
            "short",
            "small",
            "large",
            "money and talk",
            "exactly five letters"
        ]
    },
    "lines that begin with the characters 're' (must be first two characters)": {
        "regex": "re.*",
        "string_matches": [
            "recalled",
            "replace",
            "ready",
            "real estate"
        ],
        "string_mismatches": [
            "the recall",
            "we replace",
            "already",
            "store"
        ]
    },
    "lines containing the exact sequence of characters 'in' anywhere in the line": {
        "regex": ".*in.*",
        "string_matches": [
            "within",
            "in a string",
            "this contains in",
            "paint"
        ],
        "string_mismatches": [
            "this",
            "another",
            "none here",
            "example"
        ]
    },
    "lines containing the exact sequence of characters 'ick' anywhere in the line": {
        "regex": ".*ick.*",
        "string_matches": [
            "quick",
            "wicked",
            "stick",
            "picking"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "ic"
        ]
    },
    "lines containing any word that begins with 'ki' followed by zero or more letters": {
        "regex": ".*\\bki[A-Za-z]*\\b.*",
        "string_matches": [
            "king",
            "kingdom",
            "kick",
            "kind words"
        ],
        "string_mismatches": [
            "skiing",
            "taking",
            "queen"
        ]
    },
    "lines where the last character is a numeric digit (0-9)": {
        "regex": ".*[0-9]",
        "string_matches": [
            "line12",
            "anotherline345",
            "yetanother6789",
            "test9"
        ],
        "string_mismatches": [
            "line",
            "anotherline",
            "yetanother",
            "12 test"
        ]
    },
    "lines that contain exactly two vowels (a,e,i,o,u) in any position": {
        "regex": "(.*[AEIOUaeiou].*){2}",
        "string_matches": [
            "hello",
            "train",
            "mouse",
            "bread"
        ],
        "string_mismatches": [
            "sky",
            "myth",
            "cry",
            "rhythm"
        ]
    },
    "lines that contain exactly five vowels (a,e,i,o,u) in any position": {
        "regex": "(.*[AEIOUaeiou].*){5}",
        "string_matches": [
            "education",
            "evaluation",
            "regulation",
            "orientation"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "elephant",
            "octopus"
        ]
    },
    "lines containing the word 'hello' followed by the word 'world' with 1 to 5 characters between them": {
        "regex": ".*(\\bhello\\b.{1,5}\\bworld\\b).*",
        "string_matches": [
            "hello world",
            "hello to world",
            "hello my world"
        ],
        "string_mismatches": [
            "hello beautiful world",
            "hello to the new world",
            "hello there in the world",
            "world dear hello"
        ]
    },
    "lines that end with the exact sequence '100'": {
        "regex": ".*100",
        "string_matches": [
            "count to 100",
            "score is 100",
            "number 100",
            "100"
        ],
        "string_mismatches": [
            "100 points",
            "1000",
            "10",
            "1001"
        ]
    },
    "lines containing three or more digits (0-9) in any position": {
        "regex": "(.*[0-9].*){3,}",
        "string_matches": [
            "abc123def",
            "1a2b3c",
            "123456",
            "1st 2nd 3rd"
        ],
        "string_mismatches": [
            "12",
            "1a2",
            "number5",
            "test 12"
        ]
    },
    "lines containing at least one word that ends with the exact sequence 'ch'": {
        "regex": ".*\\b[A-Za-z]*ch\\b.*",
        "string_matches": [
            "I will teach",
            "reach for it",
            "that's such a beach",
            "watch the match"
        ],
        "string_mismatches": [
            "chair",
            "achieve",
            "chocolate",
            "chess piece"
        ]
    },
    "lines that contain exactly the word 'trust' (not as part of another word), case sensitive": {
        "regex": ".*\\btrust\\b.*",
        "string_matches": [
            "You have my trust",
            "I trust you completely",
            "This is a matter of trust",
            "In trust we believe"
        ],
        "string_mismatches": [
            "trustworthy",
            "entrusting",
            "distrustful",
            "This is a test",
            "Trust is important"
        ]
    },
    "lines that contain exactly one word that is exactly 3 letters long": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "The cat sat",
            "A dog ran fast",
            "I see the sun shine",
            "The box is heavy",
            "She can dance"
        ],
        "string_mismatches": [
            "cats dogs",
            "running fast",
            "a b c d",
            "sample1",
            "test3"
        ]
    },
    "lines that end with the exact sequence of letters 'boby'": {
        "regex": ".*boby",
        "string_matches": [
            "My favorite hobby is boby",
            "Coding is my boby",
            "The best boby",
            "boby",
            "I like boby"
        ],
        "string_mismatches": [
            "I love Bobby",
            "This is Boby's hat",
            "bobycat",
            "boby.",
            "boby!"
        ]
    },
    "lines that contain exactly the word 'couch' (not as part of another word)": {
        "regex": ".*\\bcouch\\b.*",
        "string_matches": [
            "I sat on the couch.",
            "The couch is comfortable.",
            "My new couch is brown.",
            "The old couch is worn out.",
            "We bought a new couch yesterday"
        ],
        "string_mismatches": [
            "couchette",
            "couchsurfing",
            "The chair is broken.",
            "I like to sit on the floor.",
            "The sofa is very comfortable."
        ]
    },
    "lines that contain five or more complete words (letters only)": {
        "regex": "(\\b[A-Za-z]+\\b.*){5,}",
        "string_matches": [
            "This is a sample string with more than five words.",
            "Another example string that contains at least five words.",
            "Yet another string fulfilling the requirement of at least five words.",
            "This sentence has precisely five words in it.",
            "This is a rather long sentence that certainly contains more than the required five words."
        ],
        "string_mismatches": [
            "Short.",
            "One word.",
            "Two words only.",
            "Three words here.",
            "Four words total here"
        ]
    },
    "lines that contain 'th' occurring anywhere after 'ch'": {
        "regex": ".*ch.*th.*",
        "string_matches": [
            "archth",
            "batchth",
            "catchth"
        ],
        "string_mismatches": [
            "abc",
            "bcd",
            "cde"
        ]
    },
    "lines that contain the letter 'z' at least twice": {
        "regex": ".*z.*z.*",
        "string_matches": [
            "pizzazz",
            "fuzzbuzz",
            "zebrazz"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "lines containing at least one 'w' or 's' character": {
        "regex": ".*[ws].*",
        "string_matches": [
            "sword",
            "swing",
            "sweet"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain the letter 'q' at least twice": {
        "regex": ".*q.*q.*",
        "string_matches": [
            "quizzical questions",
            "quality questions",
            "queueing quickly",
            "quack quack"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "this is a test",
            "another string",
            "a"
        ]
    },
    "lines that contain words starting with 'an'": {
        "regex": ".*\\ban[A-Za-z]*\\b.*",
        "string_matches": [
            "an apple a day keeps the doctor away",
            "Another day, another dollar"
        ],
        "string_mismatches": [
            "This one too",
            "Neither does this one"
        ]
    },
    "lines that end exactly with 'vem'": {
        "regex": ".*vem$",
        "string_matches": [
            "This line ends with vem",
            "Another line that ends with vem",
            "Yet another one that ends with vem"
        ],
        "string_mismatches": [
            "Neither does this one",
            "And this one ends with something else"
        ]
    },
    "lines that contain words starting with the letter 'x'": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "xenon",
            "xylophone",
            "xylem"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines that contain at least seven words": {
        "regex": "(\\b[A-Za-z]+\\b.*){7,}",
        "string_matches": [
            "This string has more than seven words in it",
            "This is another example of a string with more than seven words",
            "This is a third example with more than seven words to meet the requirement"
        ],
        "string_mismatches": [
            "This is a short string",
            "Another short one",
            "One more short string"
        ]
    },
    "lines that contain at least five alphabetical letters": {
        "regex": ".*([A-Za-z].*){5,}.*",
        "string_matches": [
            "string",
            "longer",
            "another",
            "example"
        ],
        "string_mismatches": [
            "a",
            "two",
            "four"
        ]
    },
    "lines that contain the word 'inoperative' as a standalone word": {
        "regex": ".*\\binoperative\\b.*",
        "string_matches": [
            "The machine is inoperative.",
            "The inoperative device was replaced.",
            "His inoperative leg required surgery.",
            "We discovered the inoperative component causing issues."
        ],
        "string_mismatches": [
            "The machine is operative.",
            "The device worked perfectly.",
            "His leg was fully functional.",
            "All components functioned correctly.",
            "The system is online."
        ]
    },
    "lines that end with the word 'you' exactly": {
        "regex": ".*\\byou$",
        "string_matches": [
            "How are you",
            "It's all about you",
            "Thinking of you"
        ],
        "string_mismatches": [
            "I love pizza",
            "The sky is blue",
            "Programming is fun"
        ]
    },
    "lines that contain at least one 4 letter word ending in 's'": {
        "regex": ".*\\b[A-Za-z]{3}s\\b.*",
        "string_matches": [
            "This has four",
            "With some cats",
            "Plus dogs"
        ],
        "string_mismatches": [
            "No short words here",
            "Just one word"
        ]
    },
    "lines which contain the letter 'h' directly after any letter.": {
        "regex": ".*[A-Za-z].*h.*",
        "string_matches": [
            "ahoy",
            "their",
            "within",
            "alpha",
            "behold"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "jkl",
            "mno"
        ]
    },
    "lines which have the word 'egg'": {
        "regex": ".*\\begg\\b.*",
        "string_matches": [
            "egg",
            "fried egg",
            "egg salad",
            "scrambled egg"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape"
        ]
    },
    "lines that have at least two words that start with 's'.": {
        "regex": "(.*\\bs[A-Za-z]*\\b.*){2}",
        "string_matches": [
            "She sells seashells by the seashore",
            "Seven swans swam swiftly",
            "Sally saw sixteen snakes sleeping soundly"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "lines that contain a number ending with '0' (divisible by 10)": {
        "regex": ".*[0-9]*0.*",
        "string_matches": [
            "10",
            "20",
            "30"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "11"
        ]
    },
    "lines that end with the word 'free'.": {
        "regex": ".*\\bfree$",
        "string_matches": [
            "Stay free",
            "Set yourself free",
            "Feel free"
        ],
        "string_mismatches": [
            "Make it easy",
            "Just breathe",
            "Do it now for free."
        ]
    },
    "lines which contain the substring 'ead' or 'pro' anywhere": {
        "regex": ".*(ead|pro).*",
        "string_matches": [
            "head",
            "bread",
            "profile",
            "pro"
        ],
        "string_mismatches": [
            "example",
            "test",
            "hello"
        ]
    },
    "lines that contain the word 'and'": {
        "regex": ".*\\band\\b.*",
        "string_matches": [
            "This string contains the word and.",
            "Another string with the word and in it.",
            "This one also has and"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another example string.",
            "One more string"
        ]
    },
    "lines that end in 'e'": {
        "regex": ".*e",
        "string_matches": [
            "apple",
            "orange",
            "grape",
            "pineapple",
            "blue"
        ],
        "string_mismatches": [
            "banana",
            "kiwi",
            "e."
        ]
    },
    "lines end in an 'a'": {
        "regex": ".*a",
        "string_matches": [
            "unia",
            "area",
            "folia",
            "academia",
            "spania"
        ],
        "string_mismatches": [
            "unite",
            "fol"
        ]
    },
    "lines that have at least three words beginning with a vowel.": {
        "regex": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){3}",
        "string_matches": [
            "apple orange elephant",
            "eagle owl igloo",
            "umbrella apricot eggplant"
        ],
        "string_mismatches": [
            "one two three",
            "four five six",
            "seven eight nine"
        ]
    },
    "lines which contain at least 3 consecutive letters.": {
        "regex": ".*([A-Za-z]{3}).*",
        "string_matches": [
            "abc",
            "def",
            "ghi",
            "xyz"
        ],
        "string_mismatches": [
            "a",
            "ab",
            "1234"
        ]
    },
    "lines that contain the word 'car' appearing anywhere between the words 'try' and 'say' (order can be reversed).": {
        "regex": ".*try.*car.*say.*|.*say.*car.*try.*",
        "string_matches": [
            "try car say",
            "I try car say this",
            "try car say again"
        ],
        "string_mismatches": [
            "try to say",
            "try say"
        ]
    },
    "lines that contain at least one six-letter word that begins with the letter 'y'.": {
        "regex": ".*\\by[A-Za-z]{5}\\b.*",
        "string_matches": [
            "yarrow",
            "yellow",
            "yearly",
            "yodels",
            "yachts"
        ],
        "string_mismatches": [
            "yellowish",
            "yellower",
            "yesterday",
            "yachtsman",
            "yearning"
        ]
    },
    "lines that contain at least one word that starts with a vowel (A, E, I, O, U).": {
        "regex": ".*\\b[AEIOUaeiou][A-Za-z]*\\b.*",
        "string_matches": [
            "apple",
            "orange",
            "ear",
            "ice cream",
            "earring"
        ],
        "string_mismatches": [
            "bcd",
            "qrst",
            "fgh"
        ]
    },
    "lines that contain the exact word 'Beaker' anywhere in the text.": {
        "regex": ".*\\bBeaker\\b.*",
        "string_matches": [
            "Beaker Street",
            "Breaking Beaker"
        ],
        "string_mismatches": [
            "Flask Street",
            "The flask exploded",
            "Breaking Flask"
        ]
    },
    "lines that start with the letters 'qu'.": {
        "regex": "^qu.*",
        "string_matches": [
            "quack",
            "queen",
            "quality"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun"
        ]
    },
    "lines that contain at least one word ending in 'ing'.": {
        "regex": ".*\\b[A-Za-z]*ing\\b.*",
        "string_matches": [
            "This sentence is interesting.",
            "Programming is fun.",
            "Singing is my hobby."
        ],
        "string_mismatches": [
            "This is a sample sentence.",
            "A third sentence for good measure."
        ]
    },
    "lines that contain at least one word that starts with 'h' and ends with 'e'.": {
        "regex": ".*\\bh[A-Za-z]*e\\b.*",
        "string_matches": [
            "house",
            "horse",
            "here",
            "hole",
            "huge"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "moon",
            "star"
        ]
    },
    "lines that contain at least one word that begins with the letter 'x'.": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "Xenial Xerxes' xylophone experienced extreme wear and tear.",
            "Xylophones and xylophonists are extraordinarily exciting.",
            "Extra x-rays examined extra-terrestrial xenomorphs."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a sample sentence."
        ]
    },
    "lines that contain at least one word that begins with the letter 'p'.": {
        "regex": ".*\\bp[A-Za-z]*\\b.*",
        "string_matches": [
            "Please pass the potatoes.",
            "Peter Piper picked a peck of pickled peppers.",
            "He picked a purple pepper"
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "Another sentence here.",
            "Is this the last sentence?"
        ]
    },
    "lines that contain at least one word with five or more letters.": {
        "regex": ".*\\b[A-Za-z]{5,}\\b.*",
        "string_matches": [
            "string contains more than five letters",
            "another string that matches",
            "this is also a matching string"
        ],
        "string_mismatches": [
            "tiny",
            "a",
            "123"
        ]
    },
    "lines that contain at least three words, each having exactly five letters.": {
        "regex": "(.*\\b[A-Za-z]{5}\\b.*){3}",
        "string_matches": [
            "among these words there are many five letter words",
            "this line contains at least three five letter words"
        ],
        "string_mismatches": [
            "short",
            "lines",
            "with",
            "few",
            "words"
        ]
    },
    "lines that contain the word 'ugly' appearing before either 'betty' or 'thomas'.": {
        "regex": ".*ugly.*(betty|thomas).*",
        "string_matches": [
            "ugly betty",
            "ugly thomas",
            "the ugly betty",
            "the ugly thomas",
            "really ugly betty"
        ],
        "string_mismatches": [
            "betty is ugly",
            "thomas is ugly",
            "beautiful betty",
            "handsome thomas",
            "ugly"
        ]
    },
    "lines that contain at least one word starting with 'fa'.": {
        "regex": ".*\\bfa[A-Za-z]*\\b.*",
        "string_matches": [
            "fantastic",
            "fanfare",
            "factory",
            "fade",
            "faith"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date",
            "elderberry"
        ]
    },
    "lines that contain 'fu' anywhere before 'bar'.": {
        "regex": ".*fu.*(ba|bar).*",
        "string_matches": [
            "fu bar",
            "This string has fu before bar"
        ],
        "string_mismatches": [
            "bar foo",
            "This has bar before fu"
        ]
    },
    "lines with more than 4 characters": {
        "regex": ".*.{5,}.*",
        "string_matches": [
            "12345",
            "abcdefg",
            "longer string",
            "more characters"
        ],
        "string_mismatches": [
            "abc",
            "123",
            "a",
            "1"
        ]
    },
    "lines that contain three vowels or more": {
        "regex": "(.*[AEIOUaeiou].*){3}",
        "string_matches": [
            "aeiou",
            "queue",
            "euphemism",
            "abstemious"
        ],
        "string_mismatches": [
            "dog",
            "cat",
            "sun",
            "moon",
            "tree"
        ]
    },
    "lines that use only words that are exactly four letters long.": {
        "regex": ".*\\b[A-Za-z]{4}\\b.*",
        "string_matches": [
            "Four word line.",
            "Cool word.",
            "Test case.",
            "This is good"
        ],
        "string_mismatches": [
            "Short.",
            "Another."
        ]
    },
    "lines containing at least one word that start with 'i' or 'I'.": {
        "regex": ".*\\b(i|I)[A-Za-z ]+\\b.*",
        "string_matches": [
            "I am a line that contains words starting with 'i'",
            "it's impossible to ignore its importance",
            "In this line, there are multiple words starting with 'i'"
        ],
        "string_mismatches": [
            "Neither does this one",
            "Nor this"
        ]
    },
    "lines containing 'mean' or 'nic' before 'est' or 'test'": {
        "regex": ".*(mean|nic).*(est|test).*",
        "string_matches": [
            "The meanest person",
            "I've never seen a nicer test"
        ],
        "string_mismatches": [
            "This is a test",
            "Another test string",
            "No mean or nice here"
        ]
    },
    "lines containing 'tain' after 're' or 'per'.": {
        "regex": ".*(re|per).*tain.*",
        "string_matches": [
            "pertain",
            "pertaining",
            "retained",
            "retaining"
        ],
        "string_mismatches": [
            "contain",
            "maintained",
            "obtained",
            "sustain"
        ]
    },
    "lines that end in 'o'": {
        "regex": ".*o",
        "string_matches": [
            "avocado",
            "tomato",
            "potato"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "kiwi"
        ]
    },
    "lines that begin with 'The' or 'For'.": {
        "regex": "^(The|For).*",
        "string_matches": [
            "The quick brown fox jumps over the lazy dog.",
            "For the sake of argument, let's assume this.",
            "The following is an important note."
        ],
        "string_mismatches": [
            "This is a sample line.",
            "Another line here.",
            "Yet another line"
        ]
    },
    "lines that end with the letter 'o'": {
        "regex": ".*o",
        "string_matches": [
            "avocado",
            "tomato",
            "potato"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "hijklmn"
        ]
    },
    "lines using any instance of 'd' or 'e' followed anywhere by 's' or 'r'": {
        "regex": ".*(d|e).*(s|r).*",
        "string_matches": [
            "desk",
            "doors",
            "dress",
            "ears",
            "error"
        ],
        "string_mismatches": [
            "abc",
            "ghi",
            "jkl"
        ]
    },
    "lines that contain at least one word ending in 'e'.": {
        "regex": ".*\\b[A-Za-z]*e\\b.*",
        "string_matches": [
            "apple",
            "bike",
            "my orange"
        ],
        "string_mismatches": [
            "example1",
            "example2"
        ]
    },
    "lines containing the word 'blog'": {
        "regex": ".*\\bblog\\b.*",
        "string_matches": [
            "My cool new blog",
            "Check out my latest blog post!",
            "This is a blog about cats"
        ],
        "string_mismatches": [
            "No blogs here",
            "Just some random text",
            "This is a different topic"
        ]
    },
    "lines having words ending with 'en'.": {
        "regex": ".*\\b[A-Za-z]*en\\b.*",
        "string_matches": [
            "This is a golden opportunity.",
            "Open the door and come in"
        ],
        "string_mismatches": [
            "This is a sample sentence.",
            "Another sentence with no matching words.",
            "This one is also different."
        ]
    },
    "lines using at least one 3 letter word": {
        "regex": ".*[A-Za-z]{3}.*",
        "string_matches": [
            "abc",
            "def",
            "ghi"
        ],
        "string_mismatches": [
            "12345",
            "123"
        ]
    },
    "lines which contain the words 'upper' or 'lower'": {
        "regex": ".*(upper|lower).*",
        "string_matches": [
            "This line is in lower case",
            "Upper and lower cases are here"
        ],
        "string_mismatches": [
            "sample1",
            "sample2",
            "sample3"
        ]
    },
    "lines that have the word 'sandwich'": {
        "regex": ".*sandwich.*",
        "string_matches": [
            "I ate a delicious sandwich.",
            "My favorite sandwich is a turkey and swiss.",
            "Is that a veggie sandwich?"
        ],
        "string_mismatches": [
            "I love hamburgers.",
            "He prefers salads.",
            "She is eating a hotdog."
        ]
    },
    "lines ending in 'ia'": {
        "regex": ".*ia",
        "string_matches": [
            "Romania",
            "Bulgaria",
            "Albania"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines that begin with the phrase 'once upon a time'": {
        "regex": "once upon a time.*",
        "string_matches": [
            "once upon a time, in a land far away",
            "once upon a time, there was a princess",
            "once upon a time, a brave knight set out on a quest"
        ],
        "string_mismatches": [
            "a brave knight",
            "in a land far away",
            "there was a princess"
        ]
    },
    "lines that contain the letters 'as' together.": {
        "regex": ".*as.*",
        "string_matches": [
            "aspiration",
            "class",
            "fast"
        ],
        "string_mismatches": [
            "sample1",
            "example",
            "test"
        ]
    },
    "lines that contain at least one digit.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "a1b",
            "123",
            "xyz456"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain at least three occurrences of 'she' anywhere in the line": {
        "regex": "(.*\\bshe\\b.*){3}",
        "string_matches": [
            "She sells seashells; she likes she-scorpions. She is a she-devil!",
            "She, she, she; three repetitions of she.",
            "She went to see she-wolves; she saw three she-wolves in the woods."
        ],
        "string_mismatches": [
            "She sells seashells by the seashore.",
            "She went to the store and bought some sheeting.",
            "The girl's name is Shelley; she is a she-wolf in disguise.",
            "There is a she-cat in the garden. She is very friendly.",
            "She had a little lamb; its fleece was white as snow. She loved it dearly; she never let it go."
        ]
    },
    "lines that begin with a word whose first letter is a vowel (A, E, I, O, U)": {
        "regex": "^\\b[AEIOUaeiou][A-Za-z]*\\b.*",
        "string_matches": [
            "Apple",
            "Orange",
            "Elephant",
            "Eagle",
            "Ireland"
        ],
        "string_mismatches": [
            "Hello",
            "World",
            "Python",
            "Java",
            "Rust"
        ]
    },
    "lines that begin with a numeral (0-9)": {
        "regex": "^[0-9].*",
        "string_matches": [
            "123 abc",
            "456 def",
            "789 ghi"
        ],
        "string_mismatches": [
            "abc 123",
            "def 456",
            "ghi 789"
        ]
    },
    "lines that contain at least one word starting with 'G' and ending with 'y'": {
        "regex": ".*\\bG[A-Za-z]*y\\b.*",
        "string_matches": [
            "Galaxy",
            "Glory",
            "Gregory"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines that contain at least three distinct words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){3,}",
        "string_matches": [
            "this is a sentence",
            "this is another one",
            "sentences are usually long"
        ],
        "string_mismatches": [
            "one",
            "two",
            "a"
        ]
    },
    "lines that contain at least one word where the letter 'e' appears after the letter 'c'": {
        "regex": ".*\\b[A-Za-z]*c[A-Za-z]*e[A-Za-z]*\\b.*",
        "string_matches": [
            "ocean",
            "ice cream",
            "bracelet"
        ],
        "string_mismatches": [
            "car",
            "bat",
            "sun"
        ]
    },
    "lines that begin with the exact word 'omega'": {
        "regex": "^omega\\b.*",
        "string_matches": [
            "omega rocks",
            "omega is great",
            "omega"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines that contain at least one word consisting of exactly three letters": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "cat sat",
            "the big dog",
            "ran so fast"
        ],
        "string_mismatches": [
            "this is a longer string",
            "another example",
            "no short words here"
        ]
    },
    "lines that contain at least one word ending with 'ot'": {
        "regex": ".*\\b[A-Za-z]*ot\\b.*",
        "string_matches": [
            "parrot",
            "forgot",
            "shot"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "test"
        ]
    },
    "lines containing a sequence of 4 or more characters in total": {
        "regex": ".*.{4,}.*",
        "string_matches": [
            "abcd",
            "This is a test",
            "1234",
            "Hello World!",
            "a b c d"
        ],
        "string_mismatches": [
            "a",
            "ab",
            "abc",
            "1 2",
            "x y"
        ]
    },
    "lines containing at least one word with 5 or more letters": {
        "regex": ".*\\b[A-Za-z]{5,}\\b.*",
        "string_matches": [
            "The horse gallops",
            "Programming is fun",
            "Beautiful day",
            "Elephant in the room",
            "Simple things"
        ],
        "string_mismatches": [
            "cat",
            "The dog",
            "A red car",
            "Up in sky",
            "I am sad"
        ]
    },
    "lines that contain at least one word consisting of at least seven letters": {
        "regex": ".*\\b[A-Za-z]{7,}\\b.*",
        "string_matches": [
            "qualification",
            "understanding",
            "communication",
            "establishment",
            "consideration"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "tree",
            "car"
        ]
    },
    "lines that contain the exact phrase 'and in this life' as a whole unit": {
        "regex": ".*\\band in this life\\b.*",
        "string_matches": [
            "and in this life is good",
            "I believe and in this life we will succeed",
            "struggle and in this life, there is always hope"
        ],
        "string_mismatches": [
            "this life is good",
            "I believe we will succeed",
            "there is always hope"
        ]
    },
    "lines that contain at least 4 words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){4,}",
        "string_matches": [
            "Four words are present",
            "This is a sentence with more than four words",
            "Another sentence with at least four words"
        ],
        "string_mismatches": [
            "one",
            "two words",
            "three word",
            "short"
        ]
    },
    "lines using at least 3 'b' anywhere": {
        "regex": "(.*b.*){3,}",
        "string_matches": [
            "bobb",
            "bbbbbbbbbbbbbbbbb",
            "The big bad bear"
        ],
        "string_mismatches": [
            "aa",
            "a",
            "cat",
            "dog",
            "123"
        ]
    },
    "lines that contain an 'x'": {
        "regex": ".*x.*",
        "string_matches": [
            "xyz",
            "x",
            "axbc"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain the symbol '-'.": {
        "regex": ".*-.*",
        "string_matches": [
            "a-bc",
            "a-bc-def",
            "123-456"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines with exactly 3 letters, starting with 'x'": {
        "regex": "x[A-Za-z]{2}",
        "string_matches": [
            "xyz",
            "xya",
            "xaz"
        ],
        "string_mismatches": [
            "abcd",
            "xy",
            "x"
        ]
    },
    "lines that contain '-' between words 'a' and 'lot' with any number of spaces between.": {
        "regex": ".*(\\ba\\b.*\\-.*\\blot\\b|\\blot\\b.*\\-.*\\ba\\b).*",
        "string_matches": [
            "a-lot",
            "a- lot",
            "a -lot",
            "a  -  lot"
        ],
        "string_mismatches": [
            "a lot",
            "a lot of",
            "alot",
            "a   lot"
        ]
    },
    "lines with at least one word that end in 'n'.": {
        "regex": ".*\\b[A-Za-z]*n\\b.*",
        "string_matches": [
            "Open the door",
            "Clean your room"
        ],
        "string_mismatches": [
            "This is a sample string",
            "Another string here"
        ]
    },
    "lines using 'lay' or 'lie'": {
        "regex": ".*l(ay|ie).*",
        "string_matches": [
            "I lay down on the couch.",
            "The book lies on the table.",
            "They lay the groundwork for the project.",
            "He lay there for hours.",
            "The city lies nestled in the valley."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "Water flows downhill."
        ]
    },
    "lines that contain at least five words that start with the letter 'f'": {
        "regex": "(.*\\bf[A-Za-z]*\\b.*){5,}",
        "string_matches": [
            "five fat frogs fly fast",
            "fifty fine furry foxes fought ferociously",
            "Frank's five fluffy friends frolicked freely"
        ],
        "string_mismatches": [
            "Four furry friends",
            "The five fluffy kittens",
            "Only three foxes"
        ]
    },
    "lines that contain the exact word 'puppy' at least once": {
        "regex": ".*\\bpuppy\\b.*",
        "string_matches": [
            "My new puppy is so cute!",
            "The puppy learned a new trick.",
            "A playful puppy ran through the park.",
            "This is a puppy.",
            "I want a puppy for Christmas"
        ],
        "string_mismatches": [
            "The cat sat on the mat.",
            "Birds singing in the trees.",
            "The sun is shining brightly.",
            "Winter is coming.",
            "She is reading a book."
        ]
    },
    "lines that contain exactly 'DEF.' anywhere in the string'": {
        "regex": ".*DEF\\..*",
        "string_matches": [
            "DEF.",
            "This line contains DEF.",
            "DEF. This is a test."
        ],
        "string_mismatches": [
            "DEF",
            "DEF ",
            "DEF1",
            "DEFS",
            "Definition"
        ]
    },
    "lines using at least one word ending with 'on'.": {
        "regex": ".*\\b[A-Za-z]*on\\b.*",
        "string_matches": [
            "The sun shone brightly on the horizon.",
            "He put his coat on.",
            "Based on the information given, we can conclude that..."
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "No relevant words here."
        ]
    },
    "lines that use at least one word starting with 'fu'.": {
        "regex": ".*\\bfu[A-Za-z]*\\b.*",
        "string_matches": [
            "fuchsia",
            "fulcrum",
            "function",
            "fundamental",
            "furthermore"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date",
            "elderberry"
        ]
    },
    "lines beginning with 'begin'": {
        "regex": "begin.*",
        "string_matches": [
            "beginner",
            "beginner's",
            "beginning"
        ],
        "string_mismatches": [
            "abc",
            "Begin",
            " end"
        ]
    },
    "lines that begin with a vowel (A, E, I, O, U) and end with the letter 'e'": {
        "regex": "^[AEIOUaeiou].*e$",
        "string_matches": [
            "apple",
            "orange",
            "eagle",
            "alice"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "test",
            "foo"
        ]
    },
    "lines that start with the exact word 'the', followed by any content": {
        "regex": "^the\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "the rain in Spain",
            "the sun shines bright"
        ],
        "string_mismatches": [
            "a quick brown fox",
            "rain in Spain",
            "sun shines bright"
        ]
    },
    "lines that end with the exact word 'and'": {
        "regex": ".*\\band$",
        "string_matches": [
            "This line ends with and",
            "Another line that ends with and",
            "One more string ending with and"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another string here.",
            "A third example string"
        ]
    },
    "lines containing a word that starts with 'pe' followed somewhere later by the word 'pan'": {
        "regex": ".*\\bpe[A-Za-z]*\\b.*\\bpan\\b.*",
        "string_matches": [
            "pepperoni pan pizza",
            "penguin pan ts",
            "people pan handler"
        ],
        "string_mismatches": [
            "perilous journey",
            "pencil box",
            "people mover"
        ]
    },
    "lines that contain the exact word 'Facebook' anywhere": {
        "regex": ".*\\bFacebook\\b.*",
        "string_matches": [
            "Facebook post",
            "Facebook is great",
            "My Facebook account"
        ],
        "string_mismatches": [
            "I like Twitter",
            "This is a Google product",
            "This is an Apple product"
        ]
    },
    "lines containing at least one word that includes 're' as part of it": {
        "regex": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*",
        "string_matches": [
            "there",
            "wherefore",
            "repair"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "abc"
        ]
    },
    "lines containing either the exact word 'of' or the exact word 'in'": {
        "regex": ".*\\b(of|in)\\b.*",
        "string_matches": [
            "The book is made of paper",
            "The cat sat in the sun",
            "The car is in the garage"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines containing at least two separate words that contain the letter 'y'": {
        "regex": ".*(\\b[A-Za-z]*y[A-Za-z]*\\b.*){2,}.*",
        "string_matches": [
            "yellow yarrow",
            "yesterday's yummy discovery",
            "my yellow yoyo"
        ],
        "string_mismatches": [
            "apple",
            "yesterday"
        ]
    },
    "lines that contain at least one occurrence of the letter 'z' anywhere": {
        "regex": ".*z.*",
        "string_matches": [
            "pizza",
            "maze",
            "zoology",
            "zealous"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape"
        ]
    },
    "lines containing 'ser' that appears after either 'lin' or 'ku'": {
        "regex": ".*(lin|ku).*ser.*",
        "string_matches": [
            "linen server",
            "kulser",
            "linser"
        ],
        "string_mismatches": [
            "kul",
            "lin"
        ]
    },
    "lines containing exactly three words, each consisting of exactly four letters": {
        "regex": "^(\\b[A-Za-z]{4}\\b\\s*){3}$",
        "string_matches": [
            "play work code",
            "test this task"
        ],
        "string_mismatches": [
            "short",
            "a word",
            "four words",
            "1234 5678 9012",
            "this is a sentence"
        ]
    },
    "lines that end with 'az'": {
        "regex": ".*az$",
        "string_matches": [
            "pizzaz",
            "daz"
        ],
        "string_mismatches": [
            "pizza",
            "da",
            "fuzzball"
        ]
    },
    "lines that start with the letter 'z'": {
        "regex": "^z.*",
        "string_matches": [
            "zebra",
            "zip",
            "zest"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines containing at least one word made up of 2 or more letters": {
        "regex": ".*\\b[A-Za-z]{2,}\\b.*",
        "string_matches": [
            "cat",
            "dog runs",
            "the bird flies",
            "to",
            "an apple"
        ],
        "string_mismatches": [
            "a",
            "1",
            "!",
            "",
            " "
        ]
    },
    "lines that begin with the letter 'e' and contain the standalone word 'jr' somewhere after": {
        "regex": "e.*\\bjr\\b.*",
        "string_matches": [
            "e hello jr world",
            "e jr",
            "e test jr test",
            "e something jr something",
            "e jr is here"
        ],
        "string_mismatches": [
            "hello e jr",
            "jr e hello",
            "e j r",
            "e jrr",
            "e junior"
        ]
    },
    "lines containing either 'b' or 'c' anywhere": {
        "regex": ".*(b|c).*",
        "string_matches": [
            "abc",
            "bcd",
            "cdb"
        ],
        "string_mismatches": [
            "a",
            "d",
            "efg"
        ]
    },
    "lines that contain the digit '4' appearing between the digits '3' and '5'": {
        "regex": ".*3.*4.*5.*|.*5.*4.*3.*",
        "string_matches": [
            "345",
            "1345",
            "a345b",
            "345c"
        ],
        "string_mismatches": [
            "354",
            "35",
            "435",
            "123",
            "abc"
        ]
    },
    "lines containing at least one word that ends in 'er'": {
        "regex": ".*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The faster runner won the race.",
            "The manager made a clever decision.",
            "The bigger hammer broke the rock.",
            "Water flows over the river.",
            "The computer's processor is very fast."
        ],
        "string_mismatches": [
            "This is a sample string.",
            "A third string sample"
        ]
    },
    "lines using the word 'going' followed immediately by a word starting with 'd'.": {
        "regex": ".*\\bgoing\\b.*d.*",
        "string_matches": [
            "I'm going down the street.",
            "He's going downtown.",
            "We are going during the day.",
            "She's going directly."
        ],
        "string_mismatches": [
            "He is going to the store.",
            "I was going home.",
            "She is going there.",
            "They were going away.",
            "We are going now"
        ]
    },
    "lines that mention 'Dylan' and 'Lynda'.": {
        "regex": "(.*Dylan.*Lynda.*)|(.*Lynda.*Dylan.*)",
        "string_matches": [
            "Dylan and Lynda went to the park.",
            "Lynda helped Dylan with his homework.",
            "Dylan saw Lynda across the room and waved.  "
        ],
        "string_mismatches": [
            "Dylan went to the park.",
            "Lynda helped with the homework.",
            "He saw her across the room and waved."
        ]
    },
    "lines containing 'foo' or 'nu' before 'dist' or 'dust'": {
        "regex": ".*(foo|nu).*(dist|dust).*",
        "string_matches": [
            "foo dust is near",
            "nu dist is far",
            "foo dist is here",
            "nu dust is there"
        ],
        "string_mismatches": [
            "dust is near foo",
            "dist is far nu",
            "dust is here foo",
            "dist is there nu",
            "no match here"
        ]
    },
    "lines using the word 'An' at least once.": {
        "regex": ".*\\bAn\\b.*",
        "string_matches": [
            "An apple a day keeps the doctor away.",
            "An interesting book.",
            "An old movie"
        ],
        "string_mismatches": [
            "The apple is red.",
            "Interesting stories."
        ]
    },
    "lines that have at least one word ending with 'ti'.": {
        "regex": ".*\\b[A-Za-z]*ti\\b.*",
        "string_matches": [
            "quantiti",
            "compatiti"
        ],
        "string_mismatches": [
            "string",
            "sample",
            "example"
        ]
    },
    "lines with at least one word starting with 'ca'.": {
        "regex": ".*\\b[A-Za-z]*ca[A-Za-z]*\\b.*",
        "string_matches": [
            "cabbage",
            "decapitate",
            "capacity",
            "cacao",
            "casually funny"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape",
            "watermelon"
        ]
    },
    "lines that have exactly 3 words": {
        "regex": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}",
        "string_matches": [
            "The sky blue",
            "I love pizza",
            "Cats are cute"
        ],
        "string_mismatches": [
            "Short",
            "Another string"
        ]
    },
    "lines that have at least a single 2 letter sequence": {
        "regex": ".*[A-Za-z]{2}.*",
        "string_matches": [
            "ab",
            "bc",
            "cd",
            "de",
            "ef"
        ],
        "string_mismatches": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ]
    },
    "lines containing at least one 5 letter word.": {
        "regex": ".*\\b[A-Za-z]{5}\\b.*",
        "string_matches": [
            "abcde",
            "fghij",
            "klmno",
            "pqrst",
            "uvwxy"
        ],
        "string_mismatches": [
            "longer",
            "another",
            "example"
        ]
    }
}