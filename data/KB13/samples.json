{
    "lines that contain only the letters 'agde'.": {
        "regex": "agde",
        "string_matches": [
            "agde",
            "agdeagde"
        ],
        "string_mismatches": [
            "aagde",
            "agxde"
        ]
    },
    "lines using words ending in 'er'.": {
        "regex": ".*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The larger the better",
            "Manager handled the case",
            "This worker is stronger"
        ],
        "string_mismatches": [
            "This is a sample string",
            "One more string"
        ]
    },
    "lines that contain the word 'dance'": {
        "regex": ".*\\bdance\\b.*",
        "string_matches": [
            "dance the night away",
            "Let's have a dance",
            "I love to dance"
        ],
        "string_mismatches": [
            "singing in the rain",
            "walking in the park",
            "reading a book",
            "cooking dinner"
        ]
    },
    "lines which have 'bar'": {
        "regex": ".*bar.*",
        "string_matches": [
            "foobar",
            "barfoo",
            "foobarbaz"
        ],
        "string_mismatches": [
            "foo",
            "baz"
        ]
    },
    "lines that include three capital letters": {
        "regex": "(.*[A-Z].*){3}",
        "string_matches": [
            "ABCDefghi",
            "ThisIsAString"
        ],
        "string_mismatches": [
            "abcdefghi",
            "thisIsastring",
            "anotherexample"
        ]
    },
    "lines using words that begin with 'z'.": {
        "regex": ".*\\bz[A-Za-z]*\\b.*",
        "string_matches": [
            "Zealous zebra zigzags.",
            "Zany zookeeper zooms.",
            "Fuzzy buzzard zooms"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another string here."
        ]
    },
    "lines that have at least 5 numbers.": {
        "regex": "(.*[0-9].*){5,}",
        "string_matches": [
            "123456",
            "7890123",
            "45678901",
            "135791113",
            "246802468"
        ],
        "string_mismatches": [
            "abcd",
            "efgh",
            "ijkl",
            "mnop",
            "qrst"
        ]
    },
    "lines that ends with letter 'f'": {
        "regex": ".*f",
        "string_matches": [
            "stuff",
            "off"
        ],
        "string_mismatches": [
            "abc",
            "hij"
        ]
    },
    "lines using a word that contains the letters 'der'": {
        "regex": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*",
        "string_matches": [
            "Under the weather",
            "Considering the options",
            "The order is important."
        ],
        "string_mismatches": [
            "Neither does this one.",
            "Nor this one either. "
        ]
    },
    "lines using only three words": {
        "regex": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}",
        "string_matches": [
            "Blue green red",
            "First second third",
            "One two three"
        ],
        "string_mismatches": [
            "Short",
            "A",
            "1 2 3 4 5"
        ]
    },
    "lines that have 2 words using 4 letters": {
        "regex": "(.*\\b[A-Za-z]{4}\\b.*){2}",
        "string_matches": [
            "test test",
            "this that",
            "word word"
        ],
        "string_mismatches": [
            "test",
            "this is a sentence",
            "1234 5678",
            "short"
        ]
    },
    "lines that have words ending in 'ing'": {
        "regex": ".*\\b[A-Za-z]*ing\\b.*",
        "string_matches": [
            "I am singing.",
            "She is dancing.",
            "He is swimming.",
            "They are playing.",
            "We are laughing"
        ],
        "string_mismatches": [
            "This is a sentence.",
            "Another simple sentence.",
            "This one too is fine.",
            "Yet another one."
        ]
    },
    "lines that contain the number '254' at least twice.": {
        "regex": "(.*254.*){2}",
        "string_matches": [
            "254 and 254",
            "This line contains 254 twice, and 254 again",
            "254 is repeated here: 254"
        ],
        "string_mismatches": [
            "This line does not contain 254",
            "Only one 254 here",
            "No 254 at all"
        ]
    },
    "lines containing the word 'art'": {
        "regex": ".*\\bart\\b.*",
        "string_matches": [
            "This sentence contains the word art.",
            "The art museum is nearby."
        ],
        "string_mismatches": [
            "This is a sentence about nature.",
            "This is a sentence about science.",
            "This is a sentence about math."
        ]
    },
    "lines which contain only an uppercase letter": {
        "regex": "[A-Z]",
        "string_matches": [
            "A",
            "B",
            "C"
        ],
        "string_mismatches": [
            "sample1",
            "another_sample",
            "yet_another"
        ]
    },
    "lines that contain at least one numeric in it.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "a1b",
            "123",
            "xyz456"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that end in an 'o'": {
        "regex": ".*o",
        "string_matches": [
            "hello",
            "world",
            "yahoo"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "hijklmn"
        ]
    },
    "lines having words ending with 'ne'.": {
        "regex": ".*\\b[A-Za-z]*ne\\b.*",
        "string_matches": [
            "one more sentence with some words that end in ne",
            "one last sentence that contains the word one"
        ],
        "string_mismatches": [
            "example",
            "test",
            "another example"
        ]
    },
    "lines that contain the numbers '9', and '10'": {
        "regex": ".*(9.*10|10.*9).*",
        "string_matches": [
            "This line contains the number 9 and 10",
            "Line 9 and 10 are present here",
            "This is line number 910"
        ],
        "string_mismatches": [
            "This is line number 1",
            "This is line number 8"
        ]
    },
    "lines with the word 'Triple' followed by words that start with 'X'": {
        "regex": ".*\\bTriple\\b.*\\bX[A-Za-z]*\\b.*",
        "string_matches": [
            "Triple Xylophone",
            "Triple X-ray",
            "Triple Xerxes"
        ],
        "string_mismatches": [
            "This is a line with Triple Y",
            "This is another line"
        ]
    },
    "lines using 'su' after 'son' or 'soon'.": {
        "regex": ".*(son|soon).*su.*",
        "string_matches": [
            "son sues for damages",
            "soon su arrived",
            "son su perro",
            "soon suficiente",
            "son su casa"
        ],
        "string_mismatches": [
            "son of a gun",
            "soon to be wed",
            "sonnet",
            "sooner or later",
            "suns out guns out",
            "soon"
        ]
    },
    "lines using 'q' before 'r'": {
        "regex": ".*q.*r.*",
        "string_matches": [
            "qwer",
            "qwerty"
        ],
        "string_mismatches": [
            "asdfgh",
            "zxcvbn",
            "yuiop"
        ]
    },
    "lines containing a word using the letters 'tt'.": {
        "regex": ".*\\b[A-Za-z]*tt[A-Za-z]*\\b.*",
        "string_matches": [
            "better",
            "bottle",
            "battle"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "moon",
            "stars"
        ]
    },
    "lines using more than 1 character": {
        "regex": ".*.{2,}.*",
        "string_matches": [
            "123",
            "abc",
            "\u4f60\u597d\u4e16\u754c"
        ],
        "string_mismatches": [
            "a",
            "1",
            " ",
            ""
        ]
    },
    "lines that contain words with 'ru'.": {
        "regex": ".*\\b[A-Za-z]*ru[A-Za-z]*\\b.*",
        "string_matches": [
            "cruise",
            "rupture",
            "rural"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines containing a word using 'ause'": {
        "regex": ".*\\b[A-Za-z]*ause[A-Za-z]*\\b.*",
        "string_matches": [
            "because",
            "cause"
        ],
        "string_mismatches": [
            "this",
            "is",
            "a",
            "test",
            "example"
        ]
    },
    "lines containing instances of 'JFK' found after 'ABC'": {
        "regex": ".*ABC.*JFK.*",
        "string_matches": [
            "ABC JFK",
            "ABC This string contains JFK",
            "This string contains ABC JFK and more"
        ],
        "string_mismatches": [
            "JFK ABC",
            "ABC DEF",
            "No JFK here"
        ]
    },
    "lines that contain numbers": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "123",
            "456",
            "789"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain words ending with vowels.": {
        "regex": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*",
        "string_matches": [
            "apple",
            "orange"
        ],
        "string_mismatches": [
            "world",
            "python"
        ]
    },
    "lines that use words starting with 's'.": {
        "regex": ".*\\bs[A-Za-z]*\\b.*",
        "string_matches": [
            "starting with some words",
            "several sentences starting with s",
            "some more strings starting with s"
        ],
        "string_mismatches": [
            "example",
            "another example",
            "one more example"
        ]
    },
    "lines using 2 words or more": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){2,}",
        "string_matches": [
            "hello world",
            "string match",
            "another example"
        ],
        "string_mismatches": [
            "a",
            "b",
            "c"
        ]
    },
    "lines using at least 3 characters": {
        "regex": ".*.{3}.*",
        "string_matches": [
            "string",
            "longerstring",
            "anotherstringlongerthanprevious"
        ],
        "string_mismatches": [
            "st",
            "in",
            "a",
            "b",
            "c"
        ]
    },
    "lines that contain the phrase 'city of'.": {
        "regex": ".*(.*\\bcity of\\b.*).*",
        "string_matches": [
            "the city of lights",
            "the city of angels",
            "the big city of dreams"
        ],
        "string_mismatches": [
            "a small town",
            "a country village",
            "a big suburb"
        ]
    },
    "lines that contain between two to seven words.": {
        "regex": "([^A-Za-z]*\\b[A-Za-z][A-Za-z]*\\b[^A-Za-z]*){2,7}",
        "string_matches": [
            "The quick brown rabbit jumps",
            "This is a sentence",
            "A long string",
            "One two three four",
            "Five six seven"
        ],
        "string_mismatches": [
            "Short",
            ""
        ]
    },
    "lines that use words starting with 'ga'.": {
        "regex": ".*\\bga[A-Za-z]*\\b.*",
        "string_matches": [
            "galaxy",
            "gadget",
            "gather"
        ],
        "string_mismatches": [
            "example",
            "test",
            "hello"
        ]
    },
    "lines containing any number with an '8' in it.": {
        "regex": ".*8.*",
        "string_matches": [
            "18",
            "987",
            "482",
            "128"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi",
            "jkl"
        ]
    },
    "lines which contain only the number '3'.": {
        "regex": "3",
        "string_matches": [
            "3",
            "3",
            "3"
        ],
        "string_mismatches": [
            "123",
            "abc3",
            "12345"
        ]
    },
    "lines that contain words starting with 'pa'.": {
        "regex": ".*\\bpa[A-Za-z]*\\b.*",
        "string_matches": [
            "package",
            "pants",
            "patient",
            "path"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "amazing",
            "test"
        ]
    },
    "lines that contain only three words.": {
        "regex": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}",
        "string_matches": [
            "The quick brown",
            "Dog barks loudly",
            "Sun shines brightly"
        ],
        "string_mismatches": [
            "One",
            ""
        ]
    },
    "lines where the number '0' appears": {
        "regex": ".*0.*",
        "string_matches": [
            "The number is 0",
            "There are 10 apples",
            "Start from zero, 0"
        ],
        "string_mismatches": [
            "one",
            "two",
            "three"
        ]
    },
    "lines that feature 'email' followed by the word 'spam'.": {
        "regex": ".*email.*\\bspam\\b.*",
        "string_matches": [
            "This email spam is annoying",
            "I received an email spam today",
            "Check your email spam folder"
        ],
        "string_mismatches": [
            "This is a test string",
            "This string is another test",
            "Yet another string"
        ]
    },
    "lines that have within them words ending in 'ch'.": {
        "regex": ".*\\b[A-Za-z]*ch\\b.*",
        "string_matches": [
            "match",
            "catch",
            "fetch",
            "much",
            "such"
        ],
        "string_mismatches": [
            "miss",
            "hit",
            "run",
            "jump",
            "walk"
        ]
    },
    "lines using the word 'clue'": {
        "regex": ".*\\bclue\\b.*",
        "string_matches": [
            "Follow the clue to the treasure.",
            "The clue was hidden in plain sight.",
            "I need a clue to solve this mystery.",
            "The detective followed the clue.",
            "The crossword clue was difficult to solve"
        ],
        "string_mismatches": [
            "This string lacks any clues.",
            "There are no clues here.",
            "No clues were found.",
            "This sentence contains no clues whatsoever"
        ]
    },
    "lines that contain 'news' before 'paper' or 'show'.": {
        "regex": ".*news.*(paper|show).*",
        "string_matches": [
            "news paper",
            "news show",
            "good news paper"
        ],
        "string_mismatches": [
            "breaking news",
            "local news",
            "latest news"
        ]
    },
    "lines using 'min' before 'imal'": {
        "regex": ".*min.*imal.*",
        "string_matches": [
            "min imal",
            "min-imal",
            "minimum imal"
        ],
        "string_mismatches": [
            "minimum",
            "minimus",
            "immal"
        ]
    },
    "lines that include the string 'rst'": {
        "regex": ".*rst.*",
        "string_matches": [
            "rstuv",
            "qrst",
            "rst"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain at least two words starting with 'h' in them.": {
        "regex": "(.*\\bh[A-Za-z]*\\b.*){2}",
        "string_matches": [
            "happy hippo has a hat",
            "how happy he is to have a home",
            "he has his homework",
            "the happy hippo hopped happily",
            "harry and his hamster"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "this is a test",
            "another test string"
        ]
    },
    "lines that begin with a number": {
        "regex": "[0-9].*",
        "string_matches": [
            "1 alpha",
            "2 beta",
            "3 gamma"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines using words containing 'ope'.": {
        "regex": ".*\\b[A-Za-z]*ope[A-Za-z]*\\b.*",
        "string_matches": [
            "hopeful",
            "rope",
            "open sesame",
            "cooperation"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "test",
            "sample"
        ]
    },
    "lines that use words starting with 'bi'.": {
        "regex": ".*\\bbi[A-Za-z]*\\b.*",
        "string_matches": [
            "bicycle",
            "big",
            "bill"
        ],
        "string_mismatches": [
            "apple",
            "oranges",
            "grapes"
        ]
    },
    "lines using 'oon'": {
        "regex": ".*oon.*",
        "string_matches": [
            "spoon",
            "moon",
            "boon"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines using words beginning with the letter 'g'": {
        "regex": ".*\\bg[A-Za-z]*\\b.*",
        "string_matches": [
            "Gregarious gatherings galore",
            "Gargantuan growth",
            "Gorgeous georgette gown"
        ],
        "string_mismatches": [
            "A beautiful sunset",
            "Small talk",
            "A pleasant day"
        ]
    },
    "lines containing any mention of the word 'code'.": {
        "regex": ".*\\bcode\\b.*",
        "string_matches": [
            "This line of code is perfect.",
            "The code is running smoothly.",
            "Need to debug this piece of code.",
            "The source code is available online.",
            "Snippet of Python code"
        ],
        "string_mismatches": [
            "This line is perfect.",
            "The program is running smoothly.",
            "Need to debug this.",
            "The source is available online.",
            "Snippet of Python."
        ]
    },
    "lines that contain 5 words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){5}",
        "string_matches": [
            "This is a sample string",
            "This is string number three"
        ],
        "string_mismatches": [
            "This is a string",
            "Short string"
        ]
    },
    "lines using 'mno' after 'pqr'": {
        "regex": ".*pqr.*mno.*",
        "string_matches": [
            "pqr mno",
            "pqr mno pqr",
            "xyz pqr mno"
        ],
        "string_mismatches": [
            "abc",
            "pqrxyz",
            "stu"
        ]
    },
    "lines where there are two consecutive capital letters": {
        "regex": ".*[A-Z][A-Z].*",
        "string_matches": [
            "GHijklmn",
            "MNOPQrs"
        ],
        "string_mismatches": [
            "sample1",
            "example",
            "test"
        ]
    },
    "lines containing a letter": {
        "regex": ".*[A-Za-z].*",
        "string_matches": [
            "abc",
            "a123",
            "xyz123"
        ],
        "string_mismatches": [
            "123",
            "456",
            "789"
        ]
    },
    "lines that contain the word 'orange'.": {
        "regex": ".*\\borange\\b.*",
        "string_matches": [
            "This is an orange.",
            "I like the color orange.",
            "The orange is round and juicy. ",
            "My favorite color is orange"
        ],
        "string_mismatches": [
            "This is an apple.",
            "I like the color blue.",
            "Banana is a fruit.",
            "The apple is red and sweet.",
            "My favorite color is green"
        ]
    },
    "lines using a word of 5 letters or less.": {
        "regex": ".*\\b[A-Za-z]{1,5}\\b.*",
        "string_matches": [
            "Small",
            "Train",
            "Apple",
            "Phone",
            "Limit"
        ],
        "string_mismatches": [
            "longest_string",
            "Another_longer_string",
            "ThisIsAlsoALongString"
        ]
    },
    "lines that have words with 'la'.": {
        "regex": ".*\\b[A-Za-z]*la[A-Za-z]*\\b.*",
        "string_matches": [
            "plane",
            "lamp",
            "plate",
            "flagella",
            "flax"
        ],
        "string_mismatches": [
            "cloud",
            "sun",
            "tree",
            "star"
        ]
    },
    "lines that using the symbol '+' or '-'.": {
        "regex": ".*(\\+|-).*",
        "string_matches": [
            "1+2",
            "a-b",
            "x+y-z"
        ],
        "string_mismatches": [
            "abc",
            "123",
            "xyz"
        ]
    },
    "lines that contain the word 'Hindi'.": {
        "regex": ".*\\bHindi\\b.*",
        "string_matches": [
            "This sentence is in Hindi.",
            "Learning Hindi is fun.",
            "This is a Hindi phrase."
        ],
        "string_mismatches": [
            "This is a sentence in English.",
            "This is a sentence in Spanish.",
            "This is a sentence in French"
        ]
    },
    "lines that have at least one capital letter.": {
        "regex": ".*[A-Z].*",
        "string_matches": [
            "String",
            "AnotherString",
            "YetAnotherString"
        ],
        "string_mismatches": [
            "lowercase",
            "anotherlowercase",
            "yetanotherlowercase"
        ]
    },
    "lines that have at least 3, but not more that 6 words.": {
        "regex": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){3,6}",
        "string_matches": [
            "This is a short string",
            "Another short string",
            "Three words here",
            "Four word string",
            "Five words total",
            "Six words exactly"
        ],
        "string_mismatches": [
            "Short",
            "One"
        ]
    },
    "lines that contain 'mix' or 'shake'.": {
        "regex": ".*mix.*|.*shake.*",
        "string_matches": [
            "mix it up",
            "shake well",
            "shake and bake",
            "mix the colors"
        ],
        "string_mismatches": [
            "stir gently",
            "fold in",
            "beat until stiff",
            "blend smoothly"
        ]
    },
    "lines where 'PQR' is between a number and 'LMNO'": {
        "regex": ".*[0-9].*PQR.*LMNO.*|.*LMNO.*PQR.*[0-9].*",
        "string_matches": [
            "123PQR456LMNO",
            "99PQR1LMNO",
            "1PQR0LMNO",
            "0PQR1LMNO"
        ],
        "string_mismatches": [
            "PQR123LMNO",
            "123PQR",
            "LMNOPQR",
            "123PQR456",
            "abcPQR123LMNO"
        ]
    },
    "lines that have words with 7 letters.": {
        "regex": ".*\\b[A-Za-z]{7}\\b.*",
        "string_matches": [
            "However",
            "Because",
            "Reading",
            "Writing"
        ],
        "string_mismatches": [
            "Cat",
            "Dog",
            "Sun",
            "Moon",
            "Car",
            "Bike"
        ]
    },
    "lines containing 'a' before 'b'": {
        "regex": ".*a.*b.*",
        "string_matches": [
            "ab",
            "a b",
            "a   b",
            "abcde"
        ],
        "string_mismatches": [
            "ba",
            "b a",
            "b   a",
            "bcdea"
        ]
    },
    "lines containing 'h', or 'i'": {
        "regex": ".*(h|i).*",
        "string_matches": [
            "hi",
            "hello"
        ],
        "string_mismatches": [
            "abc",
            "def"
        ]
    },
    "lines that contain 'ject' or 'pel'": {
        "regex": ".*(ject|pel).*",
        "string_matches": [
            "projectile",
            "pellet",
            "object"
        ],
        "string_mismatches": [
            "string",
            "sample",
            "example"
        ]
    },
    "lines that carry the word 'Jim' located in between 'Stacks' and 'Slim'.": {
        "regex": ".*Stacks.*\\bJim\\b.*Slim.*|.*Slim.*\\bJim\\b.*Stacks.*",
        "string_matches": [
            "Stacks Jim Slim",
            "Stacks Jim is here Slim",
            "Stacks Jim and Slim"
        ],
        "string_mismatches": [
            "Stacks are cool",
            "Jim is not here",
            "Slim shady"
        ]
    },
    "lines using at least 5 'd'": {
        "regex": "(.*d.*){5,}",
        "string_matches": [
            "ddddddddddddddddddddddddd",
            "ddddddddddddd",
            "ddddddddddddd"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "123"
        ]
    },
    "lines that contain at least 2 digits.": {
        "regex": "(.*[0-9].*){2,}",
        "string_matches": [
            "123 abc",
            "string 12",
            "1 and 2",
            "a1b2c3d4"
        ],
        "string_mismatches": [
            "string",
            "no number",
            "one digit 1",
            "no digits here"
        ]
    },
    "lines that have 2 or more numbers.": {
        "regex": "(.*[0-9].*){2,}",
        "string_matches": [
            "1 and 2",
            "123 abc 456",
            "this has 1, 2, and 3 numbers"
        ],
        "string_mismatches": [
            "abc",
            "no numbers here",
            "only 1 number"
        ]
    },
    "lines that end containing the letter 'z'.": {
        "regex": ".*z",
        "string_matches": [
            "The quick brown fox jumps over a lazy fox",
            "A zesty lemon and a fizzy drink",
            "buzz"
        ],
        "string_mismatches": [
            "This is a string",
            "Another example",
            "No Z's here"
        ]
    },
    "lines which have three words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){3,}",
        "string_matches": [
            "one two three",
            "some three words",
            "another three words"
        ],
        "string_mismatches": [
            "short",
            "a"
        ]
    },
    "lines with 'sec' before 'mun'.": {
        "regex": ".*sec.*mun.*",
        "string_matches": [
            "sec mun",
            "a sec mun b",
            "sec mun is here"
        ],
        "string_mismatches": [
            "this is a test",
            "another test",
            "yet another test"
        ]
    },
    "lines that have two or more words ending in 'a'.": {
        "regex": ".*(.*\\b[A-Za-z]*a\\b.*){2}.*",
        "string_matches": [
            "The llama and alpaca grazed in the field.",
            "A tuba and a viola are in the orchestra.",
            "She saw a koala and a llama at the zoo. We saw a pizza and a pasta"
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "One word only.",
            "No words ending in 'a'."
        ]
    },
    "lines that have 6 words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){6}",
        "string_matches": [
            "The quick brown fox jumps over",
            "This is a sample sentence with",
            "Another example of a six word",
            "A lazy fox sleeps soundly in",
            "Six words make a sentence here"
        ],
        "string_mismatches": [
            "This is a short sentence",
            "One",
            "A very short line",
            "Another short one here"
        ]
    },
    "lines containing 'k', or 'l'": {
        "regex": ".*(k|l).*",
        "string_matches": [
            "klm",
            "lmn",
            "opk"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain words ending with 'mae'.": {
        "regex": ".*\\b[A-Za-z]*mae\\b.*",
        "string_matches": [
            "This line contains the word blomae.",
            "Here is another example with a word that ends in mae: blomae.",
            "This string has the word epitomemae.",
            "This example uses the word mae.",
            "This has a word with mae"
        ],
        "string_mismatches": [
            "This is a simple string.",
            "No matching words here"
        ]
    },
    "lines that contain words starting with 'h'.": {
        "regex": ".*\\bh[A-Za-z]*\\b.*",
        "string_matches": [
            "happy",
            "house",
            "hello"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines where the  word 'Homer' precedes the word 'Odyssey'": {
        "regex": ".*\\bHomer\\b.*\\bOdyssey\\b.*",
        "string_matches": [
            "Homer's Odyssey",
            "Homer Odyssey"
        ],
        "string_mismatches": [
            "The Odyssey",
            "Odyssey's adventures",
            "Homeric Hymns"
        ]
    },
    "lines using the word 'hero'.": {
        "regex": ".*\\bhero\\b.*",
        "string_matches": [
            "The hero saved the day.",
            "Our hero is brave and strong.",
            "Is this a hero's journey?"
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a simple sentence."
        ]
    },
    "lines that have words starting with 'kai'.": {
        "regex": ".*\\bkai[A-Za-z]*\\b.*",
        "string_matches": [
            "kaiser",
            "kaiju",
            "kai",
            "kaif"
        ],
        "string_mismatches": [
            "abc",
            "bcd",
            "cde",
            "def"
        ]
    },
    "lines that use 'a' or 'b' before words ending with 'er'.": {
        "regex": ".*(a|b).*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The baker came over",
            "The faster runner won",
            "Grab a rubber band"
        ],
        "string_mismatches": [
            "This is a string",
            "Another string here",
            "Some more strings"
        ]
    },
    "lines starting with 'abc'": {
        "regex": "abc.*",
        "string_matches": [
            "abc123",
            "abc",
            "abc xyz"
        ],
        "string_mismatches": [
            "def456",
            "xyz",
            "123 abc"
        ]
    },
    "lines using three character words begining with the letters 'CE'.": {
        "regex": ".*\\bCE[A-Za-z]\\b.*",
        "string_matches": [
            "CEO",
            "CEI",
            "CEL"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "123",
            "abc"
        ]
    },
    "lines using 'abc' after 'def'": {
        "regex": ".*def.*abc.*",
        "string_matches": [
            "defabc",
            "abcdefabc",
            "def abc"
        ],
        "string_mismatches": [
            "def",
            "abc def",
            "xyzabc"
        ]
    },
    "lines which feature the word 'hairy'.": {
        "regex": ".*\\bhairy\\b.*",
        "string_matches": [
            "hairy dog",
            "The hairy man smiled.",
            "My hairy legs are cold"
        ],
        "string_mismatches": [
            "a dog",
            "man smiled",
            "My legs are cold"
        ]
    },
    "lines containing the word 'crack'.": {
        "regex": ".*\\bcrack\\b.*",
        "string_matches": [
            "Password crack",
            "The wall began to crack",
            "The detective worked to crack the case"
        ],
        "string_mismatches": [
            "This is a sample string",
            "Another string sample",
            "This is a third sample string"
        ]
    },
    "lines that have at least three 'j'.": {
        "regex": "(.*j.*){3}",
        "string_matches": [
            "jjj",
            "jjkjjkj",
            "jjdjdjdjd"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "hij"
        ]
    },
    "lines that have 'turn'": {
        "regex": ".*turn.*",
        "string_matches": [
            "turn around",
            "take a turn",
            "turn the page"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines using 'ghi' after 'jkl'": {
        "regex": ".*jkl.*ghi.*",
        "string_matches": [
            "jklghi",
            "jkl abc ghi",
            "jkl123ghi"
        ],
        "string_mismatches": [
            "ghijkl",
            "abcghi",
            "jkl"
        ]
    },
    "lines using 'd' in the middle of a word.": {
        "regex": ".*\\b[A-Za-z]+d[A-Za-z]+\\b.*",
        "string_matches": [
            "endorsed",
            "adored"
        ],
        "string_mismatches": [
            "apple",
            "box",
            "cat"
        ]
    },
    "lines using 5 'd'": {
        "regex": "(.*d.*){5}",
        "string_matches": [
            "ddddddddd",
            "d d d d d",
            "ddddd ddddd",
            "d d d d dddd",
            "dddddddddddddd"
        ],
        "string_mismatches": [
            "abcde",
            "12345",
            "abcde"
        ]
    },
    "lines with capital letters": {
        "regex": ".*[A-Z].*",
        "string_matches": [
            "Line with capital letters",
            "Another line with capitals",
            "Yet another one"
        ],
        "string_mismatches": [
            "line with no capitals",
            "another line with no capitals",
            "yet another one"
        ]
    },
    "lines containing 'e', or 'f'": {
        "regex": ".*(e|f).*",
        "string_matches": [
            "the",
            "there",
            "effect"
        ],
        "string_mismatches": [
            "car",
            "boat",
            "sun"
        ]
    },
    "lines using a 5 letter sequence": {
        "regex": ".*[A-Za-z]{5}.*",
        "string_matches": [
            "abcde",
            "fghij",
            "klmno",
            "pqrst",
            "uvwxy"
        ],
        "string_mismatches": [
            "abc",
            "123456"
        ]
    },
    "lines which contain a word starting with 'ch'": {
        "regex": ".*\\bch[A-Za-z]*\\b.*",
        "string_matches": [
            "charming prince",
            "chilly weather"
        ],
        "string_mismatches": [
            "hello world",
            "summer day",
            "winter is coming"
        ]
    },
    "lines utilizing the word 'law'.": {
        "regex": ".*.*\\blaw\\b.*",
        "string_matches": [
            "The law requires all citizens to pay taxes.",
            "Natural law dictates that we should treat each other with kindness.",
            "It's against the law to steal."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a sample sentence with no legal terms.",
            "Another sentence without any reference to laws or statutes"
        ]
    },
    "lines that have the number '44'.": {
        "regex": ".*44.*",
        "string_matches": [
            "This line has the number 44 in it.",
            "44 is a significant number.",
            "Here's another line with 44."
        ],
        "string_mismatches": [
            "example",
            "test",
            "another example"
        ]
    },
    "lines that contain the letter 'A' followed by a vowel.": {
        "regex": ".*A.*[AEIOUaeiou].*",
        "string_matches": [
            "Aardvark",
            "Adieu",
            "Aerie",
            "Air"
        ],
        "string_mismatches": [
            "Bear",
            "Cat",
            "Dog",
            "Elephant",
            "Zebra"
        ]
    },
    "lines which have at least 7 numbers.": {
        "regex": ".*(.*[0-9].*){7}.*",
        "string_matches": [
            "1234567890",
            "9876543210",
            "1357924680"
        ],
        "string_mismatches": [
            "sample1",
            "sample2",
            "sample3"
        ]
    },
    "lines which end with 'you'": {
        "regex": ".*you$",
        "string_matches": [
            "Think of me, will you",
            "Come back to me, will you",
            "Please help me, will you"
        ],
        "string_mismatches": [
            "It's a beautiful day, isn't it?",
            "Hello there, friend!",
            "Please help me, will you?"
        ]
    },
    "lines that contain a digit.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "123 abc",
            "def 456",
            "ghi789",
            "abc 1",
            "1 abc"
        ],
        "string_mismatches": [
            "abc def",
            "ghi jkl",
            "mno pqr",
            "stu vwx",
            "yz abc"
        ]
    },
    "lines using a word having the string 'der'": {
        "regex": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*",
        "string_matches": [
            "under",
            "dermatologist",
            "kindergarten"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "hij"
        ]
    },
    "lines containing a word": {
        "regex": ".*\\b[A-Za-z]+\\b.*",
        "string_matches": [
            "a word",
            "words",
            "the words"
        ],
        "string_mismatches": [
            "123",
            "456",
            "789"
        ]
    },
    "lines that contain words ending in 'n'": {
        "regex": ".*\\b[A-Za-z]*n\\b.*",
        "string_matches": [
            "open",
            "pen",
            "plan"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "lines that have 'eye'": {
        "regex": ".*eye.*",
        "string_matches": [
            "I have brown eyes",
            "My eye is itchy",
            "The eye of the storm"
        ],
        "string_mismatches": [
            "This is a test",
            "Another string"
        ]
    },
    "lines that contain three letter words in them.": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "The dog ran.",
            "Cat sat on mat.",
            "Is it hot?"
        ],
        "string_mismatches": [
            "This is a longer string.",
            "Another string without three-letter words.",
            "Short string"
        ]
    },
    "lines that contain five letter words.": {
        "regex": ".*\\b[A-Za-z]{5}\\b.*",
        "string_matches": [
            "aback",
            "alive",
            "blush",
            "crane",
            "dream",
            "glove"
        ],
        "string_mismatches": [
            "dreams",
            "gloves",
            "abacus",
            "alives",
            "blushes",
            "cranes"
        ]
    },
    "lines which start with a number.": {
        "regex": "[0-9].*",
        "string_matches": [
            "1 abc",
            "2 def",
            "3 ghi"
        ],
        "string_mismatches": [
            "abc 1",
            "def 2",
            "ghi 3"
        ]
    },
    "lines that start with a 'z' and end with an 'a'.": {
        "regex": "z.*a",
        "string_matches": [
            "zebra",
            "zibra",
            "zala"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange"
        ]
    },
    "lines that match 'billy' or 'bob'.": {
        "regex": ".*(billy|bob).*",
        "string_matches": [
            "billy",
            "bob"
        ],
        "string_mismatches": [
            "john",
            "peter",
            "alice"
        ]
    },
    "lines which contain five or more 'y'": {
        "regex": "(.*y.*){5,}",
        "string_matches": [
            "yyyyyyyyy",
            "yyyyyyyyyyyyyy",
            "yyyyytestyyyyy",
            "yyyyyyyyyyyyyyyyyyyyyyyyyyyy"
        ],
        "string_mismatches": [
            "sample",
            "testing",
            "another example",
            "one more",
            "last one"
        ]
    },
    "lines that include words starting with 'ne'.": {
        "regex": ".*\\bne[A-Za-z]*\\b.*",
        "string_matches": [
            "nebula",
            "neophyte",
            "necessary",
            "nemesis"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date"
        ]
    },
    "lines containing words that start with 'x'": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "xenon",
            "xylophone",
            "xylem",
            "x-ray"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date"
        ]
    },
    "lines containing 'ge' or 'an' before 'ger' or 'tra'": {
        "regex": ".*(ge|an).*(ger|tra).*",
        "string_matches": [
            "engage trigger",
            "range tracker",
            "manager"
        ],
        "string_mismatches": [
            "example",
            "another example",
            "yet another example"
        ]
    },
    "lines that end with 'gh'": {
        "regex": ".*gh",
        "string_matches": [
            "rough",
            "tough",
            "cough",
            "enough"
        ],
        "string_mismatches": [
            "line",
            "test",
            "sample",
            "string"
        ]
    },
    "lines which contain 'sorry'": {
        "regex": ".*sorry.*",
        "string_matches": [
            "I am sorry",
            "I'm sorry for the inconvenience",
            "Please accept my apologies, I am sorry"
        ],
        "string_mismatches": [
            "I am happy",
            "What a wonderful day",
            "This is great!"
        ]
    },
    "lines that start with 'far'": {
        "regex": "far.*",
        "string_matches": [
            "far away",
            "far out",
            "far and wide"
        ],
        "string_mismatches": [
            "nearer",
            "further"
        ]
    },
    "lines using words that end in 'y' or 'i'.": {
        "regex": ".*\\b[A-Za-z]*(y|i)\\b.*",
        "string_matches": [
            "Happy family",
            "Funny story",
            "Crazy day",
            "My worry",
            "Try this"
        ],
        "string_mismatches": [
            "Wonderful world",
            "Testing",
            "Summer time",
            "Running"
        ]
    },
    "lines containing words that start with 'th'": {
        "regex": ".*\\bth[A-Za-z]*\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "they went to the store",
            "this is a sentence that starts with 'th'"
        ],
        "string_mismatches": [
            "apple banana cherry",
            "a b c"
        ]
    },
    "lines that contain 'ig' or 'physics' before 'nobel'.": {
        "regex": ".*(ig|physics).*nobel.*",
        "string_matches": [
            "Big physics nobel",
            "Nightingale's physics nobel prediction"
        ],
        "string_mismatches": [
            "nobel prize winner",
            "Nobel physics is great",
            "The nobel prize",
            "another nobel"
        ]
    },
    "lines that contain the text 'NOW'": {
        "regex": ".*NOW.*",
        "string_matches": [
            "NOW is the time!",
            "The time is NOW",
            "Act NOW"
        ],
        "string_mismatches": [
            "This is a test",
            "Another test string"
        ]
    },
    "lines that contain the text 'hello'": {
        "regex": ".*hello.*",
        "string_matches": [
            "hello world",
            "hello",
            "Say hello"
        ],
        "string_mismatches": [
            "goodbye",
            "world",
            "example"
        ]
    },
    "lines that have words ending with 'ge'.": {
        "regex": ".*\\b[A-Za-z]*ge\\b.*",
        "string_matches": [
            "engage",
            "enlarge",
            "gauge"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "Look for any line with the '@' symbol.": {
        "regex": ".*\\@.*",
        "string_matches": [
            "this line has an @ symbol",
            "another line with @ symbol here",
            "yet another line with an @ symbol at the end@"
        ],
        "string_mismatches": [
            "this line does not match",
            "another line that does not match either",
            "a third line that also does not match"
        ]
    },
    "lines using an instance of 'itch'": {
        "regex": ".*itch.*",
        "string_matches": [
            "itchy",
            "an itch or two",
            "the quick brown fox jumps over a lazy frog with an itch"
        ],
        "string_mismatches": [
            "a scratch",
            "a rich man"
        ]
    },
    "lines containing three vowels": {
        "regex": "(.*[AEIOUaeiou].*){3}",
        "string_matches": [
            "aeiou",
            "beautifully",
            "queueing"
        ],
        "string_mismatches": [
            "dog",
            "cat",
            "sun"
        ]
    },
    "lines that have more than 6 numbers.": {
        "regex": "(.*[0-9].*){7,}",
        "string_matches": [
            "1234567890",
            "9876543210",
            "1357924680",
            "this line has 1234567 numbers"
        ],
        "string_mismatches": [
            "123456",
            "1234",
            "123",
            "this line has 12345 numbers",
            "no numbers here"
        ]
    },
    "lines beginning with 'Therefore'": {
        "regex": "Therefore.*",
        "string_matches": [
            "Therefore, the answer is 42.",
            "Therefore, I conclude that...",
            "Therefore, we can proceed with the experiment.",
            "Therefore said the turtle"
        ],
        "string_mismatches": [
            "The answer is 42.",
            "I conclude that...",
            "We can proceed with the experiment.",
            "Said the turtle"
        ]
    },
    "lines that have the word 'love' preceeding the word 'you'.": {
        "regex": ".*\\blove\\b.*\\byou\\b.*",
        "string_matches": [
            "I love you",
            "I really love you",
            "I deeply love you"
        ],
        "string_mismatches": [
            "I hate you",
            "I like you"
        ]
    },
    "lines which contain a 3 letter string starting with a": {
        "regex": ".*(a[A-Za-z]{2}).*",
        "string_matches": [
            "abcde",
            "abc",
            "axc"
        ],
        "string_mismatches": [
            "bcd",
            "123",
            "xyz"
        ]
    },
    "lines starting with a 'T'.": {
        "regex": "T.*",
        "string_matches": [
            "This is a test string.",
            "Tomorrow is another day.",
            "Tenacious tigers terrorize territories.",
            "Testing 1,2,3"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "A line that does not start with T",
            "Another line without a leading T"
        ]
    },
    "lines that contain the letters 'ba'.": {
        "regex": ".*ba.*",
        "string_matches": [
            "banana",
            "basketball",
            "badminton"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that are composed of 4 or more words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){4,}",
        "string_matches": [
            "this is a valid string",
            "another valid string here",
            "yes this one is also valid"
        ],
        "string_mismatches": [
            "a",
            "two words",
            "three words only"
        ]
    },
    "lines utilizing words starting with 'b'.": {
        "regex": ".*\\bb[A-Za-z]*\\b.*",
        "string_matches": [
            "Be bold, be brave, be brilliant.",
            "Beyond the beyond, boundless beauty blooms.",
            "Brave birds build beautiful nests in big branches.",
            "Boundless blue waves break on the beach.",
            "Below the bridge, boats bob gently on the bay"
        ],
        "string_mismatches": [
            "Clever cats climb trees with ease.",
            "Adorable dogs dig holes in the garden.",
            "Amazing athletes achieve great feats.",
            "Awesome artists create inspiring masterpieces.",
            "Incredible inventions change the world."
        ]
    },
    "lines that use the word 'boom' followed by words starting with 'ka'": {
        "regex": ".*\\bboom\\b.*\\bka[A-Za-z]*\\b.*",
        "string_matches": [
            "boom kapow",
            "boom ka-ching",
            "boom kablam"
        ],
        "string_mismatches": [
            "boom bap",
            "bang kapow",
            "boom!"
        ]
    },
    "lines that end in a number": {
        "regex": ".*[0-9]",
        "string_matches": [
            "example123 123",
            "another_example456 456",
            "yet_another_one789 789"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines that contain at least one word starting with 'q'.": {
        "regex": ".*\\bq[A-Za-z]*\\b.*",
        "string_matches": [
            "Quizzical expressions are quite common.",
            "A question about quantum physics."
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Yet another string to test the regex"
        ]
    },
    "lines that have 'twist'": {
        "regex": ".*twist.*",
        "string_matches": [
            "a twist of fate",
            "he gave the rope a twist",
            "she had a twist in her ankle"
        ],
        "string_mismatches": [
            "this is a simple sentence",
            "another one",
            "and another one"
        ]
    },
    "lines containing words that start with and end with 'xyz'": {
        "regex": "xyz(.*xyz)?",
        "string_matches": [
            "xyzxyz",
            "xyzabcxyz"
        ],
        "string_mismatches": [
            "abc",
            "abcxyz"
        ]
    },
    "lines that contain words ending with 'la'.": {
        "regex": ".*\\b[A-Za-z]*la\\b.*",
        "string_matches": [
            "koala",
            "cabula",
            "manipula"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun"
        ]
    },
    "lines that contain at least one number.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "123 abc",
            "xyz 456",
            "789"
        ],
        "string_mismatches": [
            "abc xyz",
            "def ghi",
            "uvw"
        ]
    },
    "lines using 'ent' or 'ong'": {
        "regex": ".*(ent|ong).*",
        "string_matches": [
            "employment",
            "belonging",
            "ongoing",
            "engagement"
        ],
        "string_mismatches": [
            "short",
            "quick",
            "small",
            "big",
            "cat"
        ]
    },
    "lines containing words using a vowel.": {
        "regex": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*",
        "string_matches": [
            "apple",
            "banana",
            "orange",
            "watermelon",
            "grapefruit"
        ],
        "string_mismatches": [
            "rhythm",
            "crypt",
            "txt",
            "ply"
        ]
    },
    "lines with words ending in 'y'.": {
        "regex": ".*\\b[A-Za-z]*y\\b.*",
        "string_matches": [
            "happy",
            "funny",
            "puppy",
            "story"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "moon"
        ]
    },
    "lines that contain 2 numbers that contain '19'.": {
        "regex": "(.*19.*){2}",
        "string_matches": [
            "19abc19",
            "1919",
            "abc19def19ghi"
        ],
        "string_mismatches": [
            "19",
            "abc19",
            "12345",
            "a19b20c",
            "1abc19"
        ]
    },
    "lines that contain at least 2 capital letters.": {
        "regex": "(.*[A-Z].*){2,}",
        "string_matches": [
            "MultipleCapitals",
            "MoreThanTwo",
            "ACoupleMore"
        ],
        "string_mismatches": [
            "lowercase",
            "Anotherlowercase"
        ]
    },
    "lines containing a 6 letter sequence": {
        "regex": ".*[A-Za-z]{6}.*",
        "string_matches": [
            "abcdefgh",
            "uvwxyzabcdef"
        ],
        "string_mismatches": [
            "abcde",
            "12345"
        ]
    },
    "lines where the letter c appears more than one time": {
        "regex": "(.*c.*){2,}",
        "string_matches": [
            "access",
            "succeed",
            "concept",
            "oceanic",
            "accommodate"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi",
            "jkl",
            "mno"
        ]
    },
    "lines that contain words ending in 'i'.": {
        "regex": ".*\\b[A-Za-z]*i\\b.*",
        "string_matches": [
            "veni",
            "vidi",
            "vici",
            "taxi",
            "taxi"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape",
            "watermelon"
        ]
    },
    "lines using 'the'": {
        "regex": ".*the.*",
        "string_matches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "The rain in Spain falls mainly on the plain.",
            "The cat sat on the mat.",
            "There is the book I was looking for."
        ],
        "string_mismatches": [
            "This is a sample sentence.",
            "Quick brown fox jumps over a lazy dog.",
            "A beautiful day today."
        ]
    },
    "lines that mention 'trolls'.": {
        "regex": ".*trolls.*",
        "string_matches": [
            "Beware of trolls under the bridge",
            "Three trolls guarded the cave"
        ],
        "string_mismatches": [
            "A quiet night",
            "Peaceful waters",
            "Gentle breeze"
        ]
    },
    "lines that begin with the word 'the'": {
        "regex": "\\bthe\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "the earth is round"
        ],
        "string_mismatches": [
            "This is a string",
            "Another string here",
            "No match here"
        ]
    },
    "lines that contain words with 'ri'.": {
        "regex": ".*\\b[A-Za-z]*ri[A-Za-z]*\\b.*",
        "string_matches": [
            "price",
            "trip",
            "write",
            "bright"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "moon",
            "star"
        ]
    },
    "lines which contain 3 or more vowels.": {
        "regex": "(.*[AEIOUaeiou].*){3,}",
        "string_matches": [
            "education",
            "inconvenience",
            "audiovisual"
        ],
        "string_mismatches": [
            "dog",
            "cat",
            "sun"
        ]
    },
    "lines using 3 instances of 'sw'": {
        "regex": ".*(.*sw.*){3}.*",
        "string_matches": [
            "nswnswsw",
            "kswkswsw",
            "pswpswsw"
        ],
        "string_mismatches": [
            "abc",
            "123",
            "xyz"
        ]
    },
    "lines that use words starting with 'no'.": {
        "regex": ".*\\bno[A-Za-z]*\\b.*",
        "string_matches": [
            "no way",
            "nobody home",
            "non-stop"
        ],
        "string_mismatches": [
            "go home",
            "yes way",
            "stop"
        ]
    },
    "lines that contain the text 'this is it'.": {
        "regex": ".*this is it.*",
        "string_matches": [
            "this is it",
            "this is it, I tell you!"
        ],
        "string_mismatches": [
            "this is not it",
            "that is it"
        ]
    },
    "lines that start with 'the'.": {
        "regex": "(the.*).*",
        "string_matches": [
            "the quick brown rabbit",
            "the rain in spain",
            "the sun is shining"
        ],
        "string_mismatches": [
            "a quick brown fox",
            "rain in spain",
            "sun is shining"
        ]
    },
    "lines using 'din' after 'e' or 'ky'.": {
        "regex": ".*(e|ky).*din.*",
        "string_matches": [
            "e din",
            "ky din",
            "ke din",
            "kyoto din",
            "elysian din"
        ],
        "string_mismatches": [
            "din e",
            "din ky",
            "a din",
            "b din",
            "c din"
        ]
    },
    "lines that have a '7' in them": {
        "regex": ".*7.*",
        "string_matches": [
            "7up",
            "This line has a 7 in it",
            "Another line with 7"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines using at least 6 characters": {
        "regex": ".*.{6}.*",
        "string_matches": [
            "longer",
            "string",
            "another",
            "example",
            "matches"
        ],
        "string_mismatches": [
            "short",
            "a",
            "b",
            "c",
            "d"
        ]
    },
    "lines that contain the word 'zoo'.": {
        "regex": ".*\\bzoo\\b.*",
        "string_matches": [
            "The zoo is a fun place to visit.",
            "I went to the zoo yesterday and saw a monkey.",
            "My favorite animal at the zoo is the elephant.",
            "Let's go to the zoo!"
        ],
        "string_mismatches": [
            "I love to visit farms.",
            "The park is a great place to relax.",
            "She went shopping at the mall.",
            "The museum has many interesting artifacts."
        ]
    },
    "lines using the vowel combination 'ei'.": {
        "regex": ".*ei.*",
        "string_matches": [
            "weight",
            "neighbor",
            "height",
            "rein"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "example",
            "test"
        ]
    },
    "lines containing at least 2 words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){2,}",
        "string_matches": [
            "a sentence",
            "multiple words here",
            "this is a line"
        ],
        "string_mismatches": [
            "word",
            "anotherword",
            "123"
        ]
    },
    "lines containing the word 'run' or the word 'hat'": {
        "regex": ".*\\b(run|hat)\\b.*",
        "string_matches": [
            "I want to run.",
            "He wore a hat.",
            "Let's run for the hat!"
        ],
        "string_mismatches": [
            "This is a line.",
            "Another line here.",
            "No hats or running here"
        ]
    },
    "lines using 2 or more words comprised of 5 letters": {
        "regex": "(.*\\b[A-Za-z]{5}\\b.*){2,}",
        "string_matches": [
            "hello world",
            "money talks"
        ],
        "string_mismatches": [
            "short",
            "small",
            "large",
            "money",
            "dream"
        ]
    },
    "lines starting with 're'": {
        "regex": "re.*",
        "string_matches": [
            "recalled",
            "replace",
            "ready"
        ],
        "string_mismatches": [
            "matches",
            "not",
            "here"
        ]
    },
    "lines that contain 'in'": {
        "regex": ".*in.*",
        "string_matches": [
            "within",
            "in a string",
            "this contains in"
        ],
        "string_mismatches": [
            "this",
            "another"
        ]
    },
    "lines using 'ick'": {
        "regex": ".*ick.*",
        "string_matches": [
            "quick",
            "wicked"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines that contain words starting with 'ki'.": {
        "regex": ".*\\bki[A-Za-z]*\\b.*",
        "string_matches": [
            "king",
            "kingdom",
            "kick"
        ],
        "string_mismatches": [
            "queen",
            "apple",
            "banana"
        ]
    },
    "lines that end in a digit": {
        "regex": ".*[0-9]",
        "string_matches": [
            "line12",
            "anotherline345",
            "yetanother6789"
        ],
        "string_mismatches": [
            "line",
            "anotherline",
            "yetanother"
        ]
    },
    "lines that have two vowels": {
        "regex": "(.*[AEIOUaeiou].*){2}",
        "string_matches": [
            "aea",
            "iou",
            "eau"
        ],
        "string_mismatches": [
            "world",
            "test"
        ]
    },
    "lines that contain five vowels": {
        "regex": "(.*[AEIOUaeiou].*){5}",
        "string_matches": [
            "education",
            "unavailable",
            "abstemious"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cat",
            "dog"
        ]
    },
    "lines that contain the word 'hello' within 5 characters of the word 'world'.": {
        "regex": ".*(\\bhello\\b.{1,5}\\bworld\\b|\\bworld\\b.{1,5}\\bhello\\b).*",
        "string_matches": [
            "hello world",
            "hello  world"
        ],
        "string_mismatches": [
            "This is a test string",
            "hello way over there world",
            "Another test"
        ]
    },
    "lines that end with the number '100'.": {
        "regex": ".*100",
        "string_matches": [
            "This line ends with 100",
            "Another line ends with 100",
            "Yet another line ends with 100"
        ],
        "string_mismatches": [
            "line1",
            "line2",
            "line3"
        ]
    },
    "lines using at least three numerical characters": {
        "regex": "(.*[0-9].*){3,}",
        "string_matches": [
            "123 abc",
            "xyz 1234",
            "123456789"
        ],
        "string_mismatches": [
            "abc",
            "12",
            "xyz1"
        ]
    },
    "lines that contain words ending in 'ch'": {
        "regex": ".*\\b[A-Za-z]*ch\\b.*",
        "string_matches": [
            "beach",
            "catch",
            "rich",
            "approach",
            "search"
        ],
        "string_mismatches": [
            "line",
            "plane",
            "sun",
            "tree",
            "car"
        ]
    },
    "lines that contain the word 'trust'.": {
        "regex": ".*\\btrust\\b.*",
        "string_matches": [
            "You have my trust",
            "I trust you completely",
            "This is a matter of trust"
        ],
        "string_mismatches": [
            "This is a test",
            "Another line",
            "Completely different"
        ]
    },
    "lines that have a word of 3 letters": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "cat sat",
            "dog ran",
            "the sun"
        ],
        "string_mismatches": [
            "sample1",
            "example2",
            "test3"
        ]
    },
    "lines that end with 'boby'": {
        "regex": ".*boby",
        "string_matches": [
            "My favorite hobby is boby",
            "Coding is my boby",
            "The best boby"
        ],
        "string_mismatches": [
            "I love Bobby",
            "This is Boby's hat"
        ]
    },
    "lines that have the word 'couch' included": {
        "regex": ".*\\bcouch\\b.*",
        "string_matches": [
            "I sat on the couch.",
            "The couch is comfortable.",
            "My new couch is brown.",
            "The old couch is worn out.",
            "We bought a new couch yesterday"
        ],
        "string_mismatches": [
            "The chair is broken.",
            "I like to sit on the floor.",
            "There's a table in the room.",
            "He slept on the bed.",
            "The sofa is very comfortable."
        ]
    },
    "lines that contain at least five words": {
        "regex": "(\\b[A-Za-z]+\\b.*){5,}",
        "string_matches": [
            "This is a sample string with more than five words.",
            "Another example string that contains at least five words.",
            "Yet another string fulfilling the requirement of at least five words.",
            "This sentence has precisely five words in it.",
            "This is a rather long sentence that certainly contains more than the required five words."
        ],
        "string_mismatches": [
            "Short.",
            "One word.",
            "Two words only.",
            "Three words here.",
            "Four words total."
        ]
    },
    "lines that contain 'th' occurring anywhere after 'ch'": {
        "regex": ".*ch.*th.*",
        "string_matches": [
            "archth",
            "batchth",
            "catchth"
        ],
        "string_mismatches": [
            "abc",
            "bcd",
            "cde"
        ]
    },
    "lines that contain the letter 'z' at least twice": {
        "regex": ".*z.*z.*",
        "string_matches": [
            "pizzazz",
            "fuzzbuzz",
            "zebrazz"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "lines containing at least one 'w' or 's' character": {
        "regex": ".*[ws].*",
        "string_matches": [
            "sword",
            "swing",
            "sweet"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain the letter 'q' at least twice": {
        "regex": ".*q.*q.*",
        "string_matches": [
            "quizzical questions",
            "quality questions",
            "queueing quickly",
            "quack quack"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "this is a test",
            "another string",
            "a"
        ]
    },
    "lines that contain words starting with 'an'": {
        "regex": ".*\\ban[A-Za-z]*\\b.*",
        "string_matches": [
            "an apple a day keeps the doctor away",
            "Another day, another dollar"
        ],
        "string_mismatches": [
            "This one too",
            "Neither does this one"
        ]
    },
    "lines that end exactly with 'vem'": {
        "regex": ".*vem$",
        "string_matches": [
            "This line ends with vem",
            "Another line that ends with vem",
            "Yet another one that ends with vem"
        ],
        "string_mismatches": [
            "Neither does this one",
            "And this one ends with something else"
        ]
    },
    "lines that contain words starting with the letter 'x'": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "xenon",
            "xylophone",
            "xylem"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines that contain at least seven words": {
        "regex": "(\\b[A-Za-z]+\\b.*){7,}",
        "string_matches": [
            "This string has more than seven words in it",
            "This is another example of a string with more than seven words",
            "This is a third example with more than seven words to meet the requirement"
        ],
        "string_mismatches": [
            "This is a short string",
            "Another short one",
            "One more short string"
        ]
    },
    "lines that contain at least five alphabetical letters": {
        "regex": ".*([A-Za-z].*){5,}.*",
        "string_matches": [
            "string",
            "longer",
            "another",
            "example"
        ],
        "string_mismatches": [
            "a",
            "two",
            "four"
        ]
    },
    "lines that contain the word 'inoperative' as a standalone word": {
        "regex": ".*\\binoperative\\b.*",
        "string_matches": [
            "The machine is inoperative.",
            "The inoperative device was replaced.",
            "His inoperative leg required surgery.",
            "We discovered the inoperative component causing issues."
        ],
        "string_mismatches": [
            "The machine is operative.",
            "The device worked perfectly.",
            "His leg was fully functional.",
            "All components functioned correctly.",
            "The system is online."
        ]
    },
    "lines that end with the word 'you' exactly": {
        "regex": ".*\\byou$",
        "string_matches": [
            "How are you",
            "It's all about you",
            "Thinking of you"
        ],
        "string_mismatches": [
            "I love pizza",
            "The sky is blue",
            "Programming is fun"
        ]
    },
   "lines that contain at least one 4 letter word ending in 's'": {
        "regex": ".*\\b[A-Za-z]{3}s\\b.*",
        "string_matches": [
            "This has four",
            "With some cats",
            "Plus dogs"
        ],
        "string_mismatches": [
            "No short words here",
            "Just one word"
        ]
    },
    "lines which contain the letter 'h' directly after any letter.": {
        "regex": ".*[A-Za-z].*h.*",
        "string_matches": [
            "ahoy",
            "their",
            "within",
            "alpha",
            "behold"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "jkl",
            "mno"
        ]
    },
    "lines which have the word 'egg'": {
        "regex": ".*\\begg\\b.*",
        "string_matches": [
            "egg",
            "fried egg",
            "egg salad",
            "scrambled egg"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape"
        ]
    },
    "lines that have at least two words that start with 's'.": {
        "regex": "(.*\\bs[A-Za-z]*\\b.*){2}",
        "string_matches": [
            "She sells seashells by the seashore",
            "Seven swans swam swiftly",
            "Sally saw sixteen snakes sleeping soundly"
        ],
        "string_mismatches": [
            "sample",
            "example",
            "test"
        ]
    },
    "lines that contain a number ending with '0' (divisible by 10)": {
        "regex": ".*[0-9]*0.*",
        "string_matches": [
            "10",
            "20",
            "30"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "11"
        ]
    },
    "lines that end with the word 'free'.": {
        "regex": ".*\\bfree$",
        "string_matches": [
            "Stay free",
            "Set yourself free",
            "Feel free"
        ],
        "string_mismatches": [
            "Make it easy",
            "Just breathe",
            "Do it now for free."
        ]
    },
    "lines which contain the substring 'ead' or 'pro' anywhere": {
        "regex": ".*(ead|pro).*",
        "string_matches": [
            "head",
            "bread",
            "profile",
            "pro"
        ],
        "string_mismatches": [
            "example",
            "test",
            "hello"
        ]
    },
    "lines that contain the word 'and'": {
        "regex": ".*\\band\\b.*",
        "string_matches": [
            "This string contains the word and.",
            "Another string with the word and in it.",
            "This one also has and"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another example string.",
            "One more string"
        ]
    },
    "lines that end in 'e'": {
        "regex": ".*e",
        "string_matches": [
            "apple",
            "orange",
            "grape",
            "pineapple",
            "blue"
        ],
        "string_mismatches": [
            "banana",
            "kiwi",
            "e."
        ]
    },
    "lines end in an 'a'": {
        "regex": ".*a",
        "string_matches": [
            "unia",
            "area",
            "folia",
            "academia",
            "spania"
        ],
        "string_mismatches": [
            "unite",
            "fol"
        ]
    },
    "lines that have at least three words beginning with a vowel.": {
        "regex": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){3}",
        "string_matches": [
            "apple orange elephant",
            "eagle owl igloo",
            "umbrella apricot eggplant"
        ],
        "string_mismatches": [
            "one two three",
            "four five six",
            "seven eight nine"
        ]
    },
    "lines which contain at least 3 consecutive letters.": {
        "regex": ".*([A-Za-z]{3}).*",
        "string_matches": [
            "abc",
            "def",
            "ghi",
            "xyz"
        ],
        "string_mismatches": [
            "a",
            "ab",
            "1234"
        ]
    },
    "lines that contain the word 'car' appearing anywhere between the words 'try' and 'say' (order can be reversed).": {
        "regex": ".*try.*car.*say.*|.*say.*car.*try.*",
        "string_matches": [
            "try car say",
            "I try car say this",
            "try car say again"
        ],
        "string_mismatches": [
            "try to say",
            "try say"
        ]
    },
    "lines that contain at least one six-letter word that begins with the letter 'y'.": {
        "regex": ".*\\by[A-Za-z]{5}\\b.*",
        "string_matches": [
            "yarrow",
            "yellow",
            "yearly",
            "yodels",
            "yachts"
        ],
        "string_mismatches": [
            "yellowish",
            "yellower",
            "yesterday",
            "yachtsman",
            "yearning"
        ]
    },
    "lines that contain at least one word that starts with a vowel (A, E, I, O, U).": {
        "regex": ".*\\b[AEIOUaeiou][A-Za-z]*\\b.*",
        "string_matches": [
            "apple",
            "orange",
            "ear",
            "ice cream",
            "earring"
        ],
        "string_mismatches": [
            "bcd",
            "qrst",
            "fgh"
        ]
    },
    "lines that contain the exact word 'Beaker' anywhere in the text.": {
        "regex": ".*\\bBeaker\\b.*",
        "string_matches": [
            "Beaker Street",
            "Breaking Beaker"
        ],
        "string_mismatches": [
            "Flask Street",
            "The flask exploded",
            "Breaking Flask"
        ]
    },
    "lines that start with the letters 'qu'.": {
        "regex": "^qu.*",
        "string_matches": [
            "quack",
            "queen",
            "quality"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun"
        ]
    },
    "lines that contain at least one word ending in 'ing'.": {
        "regex": ".*\\b[A-Za-z]*ing\\b.*",
        "string_matches": [
            "This sentence is interesting.",
            "Programming is fun.",
            "Singing is my hobby."
        ],
        "string_mismatches": [
            "This is a sample sentence.",
            "A third sentence for good measure."
        ]
    },
    "lines that contain at least one word that starts with 'h' and ends with 'e'.": {
        "regex": ".*\\bh[A-Za-z]*e\\b.*",
        "string_matches": [
            "house",
            "horse",
            "here",
            "hole",
            "huge"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "moon",
            "star"
        ]
    },
    "lines that contain at least one word that begins with the letter 'x'.": {
        "regex": ".*\\bx[A-Za-z]*\\b.*",
        "string_matches": [
            "Xenial Xerxes' xylophone experienced extreme wear and tear.",
            "Xylophones and xylophonists are extraordinarily exciting.",
            "Extra x-rays examined extra-terrestrial xenomorphs."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "This is a sample sentence."
        ]
    },
    "lines that contain at least one word that begins with the letter 'p'.": {
        "regex": ".*\\bp[A-Za-z]*\\b.*",
        "string_matches": [
            "Please pass the potatoes.",
            "Peter Piper picked a peck of pickled peppers.",
            "He picked a purple pepper"
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "Another sentence here.",
            "Is this the last sentence?"
        ]
    },
    "lines that contain at least one word with five or more letters.": {
        "regex": ".*\\b[A-Za-z]{5,}\\b.*",
        "string_matches": [
            "string contains more than five letters",
            "another string that matches",
            "this is also a matching string"
        ],
        "string_mismatches": [
            "tiny",
            "a",
            "123"
        ]
    },
    "lines that contain at least three words, each having exactly five letters.": {
        "regex": "(.*\\b[A-Za-z]{5}\\b.*){3}",
        "string_matches": [
            "among these words there are many five letter words",
            "this line contains at least three five letter words"
        ],
        "string_mismatches": [
            "short",
            "lines",
            "with",
            "few",
            "words"
        ]
    },
    "lines that contain the word 'ugly' appearing before either 'betty' or 'thomas'.": {
        "regex": ".*ugly.*(betty|thomas).*",
        "string_matches": [
            "ugly betty",
            "ugly thomas",
            "the ugly betty",
            "the ugly thomas",
            "really ugly betty"
        ],
        "string_mismatches": [
            "betty is ugly",
            "thomas is ugly",
            "beautiful betty",
            "handsome thomas",
            "ugly"
        ]
    },
    "lines that contain at least one word starting with 'fa'.": {
        "regex": ".*\\bfa[A-Za-z]*\\b.*",
        "string_matches": [
            "fantastic",
            "fanfare",
            "factory",
            "fade",
            "faith"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date",
            "elderberry"
        ]
    },
      "lines that contain 'fu' anywhere before 'bar'.": {
        "regex": ".*fu.*(ba|bar).*",
        "string_matches": [
            "fu bar",
            "This string has fu before bar"
        ],
        "string_mismatches": [
            "bar foo",
            "This has bar before fu"
        ]
    },
    "lines with more than 4 characters": {
        "regex": ".*.{5,}.*",
        "string_matches": [
            "12345",
            "abcdefg",
            "longer string",
            "more characters"
        ],
        "string_mismatches": [
            "abc",
            "123",
            "a",
            "1"
        ]
    },
    "lines that contain three vowels or more": {
        "regex": "(.*[AEIOUaeiou].*){3}",
        "string_matches": [
            "aeiou",
            "queue",
            "euphemism",
            "abstemious"
        ],
        "string_mismatches": [
            "dog",
            "cat",
            "sun",
            "moon",
            "tree"
        ]
    },
    "lines that use only words that are exactly four letters long.": {
        "regex": ".*\\b[A-Za-z]{4}\\b.*",
        "string_matches": [
            "Four word line.",
            "Cool word.",
            "Test case.",
            "This is good"
        ],
        "string_mismatches": [
            "Short.",
            "Another."
        ]
    },
    "lines containing at least one word that start with 'i' or 'I'.": {
        "regex": ".*\\b(i|I)[A-Za-z ]+\\b.*",
        "string_matches": [
            "I am a line that contains words starting with 'i'",
            "it's impossible to ignore its importance",
            "In this line, there are multiple words starting with 'i'"
        ],
        "string_mismatches": [
            "Neither does this one",
            "Nor this"
        ]
    },
    "lines containing 'mean' or 'nic' before 'est' or 'test'": {
        "regex": ".*(mean|nic).*(est|test).*",
        "string_matches": [
            "The meanest person",
            "I've never seen a nicer test"
        ],
        "string_mismatches": [
            "This is a test",
            "Another test string",
            "No mean or nice here"
        ]
    },
    "lines containing 'tain' after 're' or 'per'.": {
        "regex": ".*(re|per).*tain.*",
        "string_matches": [
            "pertain",
            "pertaining",
            "retained",
            "retaining"
        ],
        "string_mismatches": [
            "contain",
            "maintained",
            "obtained",
            "sustain"
        ]
    },
    "lines that end in 'o'": {
        "regex": ".*o",
        "string_matches": [
            "avocado",
            "tomato",
            "potato"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "kiwi"
        ]
    },
    "lines that begin with 'The' or 'For'.": {
        "regex": "^(The|For).*",
        "string_matches": [
            "The quick brown fox jumps over the lazy dog.",
            "For the sake of argument, let's assume this.",
            "The following is an important note."
        ],
        "string_mismatches": [
            "This is a sample line.",
            "Another line here.",
            "Yet another line"
        ]
    },
    "lines that end with the letter 'o'": {
        "regex": ".*o",
        "string_matches": [
            "avocado",
            "tomato",
            "potato"
        ],
        "string_mismatches": [
            "abc",
            "defg",
            "hijklmn"
        ]
    },
    "lines using any instance of 'd' or 'e' followed anywhere by 's' or 'r'": {
        "regex": ".*(d|e).*(s|r).*",
        "string_matches": [
            "desk",
            "doors",
            "dress",
            "ears",
            "error"
        ],
        "string_mismatches": [
            "abc",
            "ghi",
            "jkl"
        ]
    },
    "lines that contain at least one word ending in 'e'.": {
        "regex": ".*\\b[A-Za-z]*e\\b.*",
        "string_matches": [
            "apple",
            "bike",
            "my orange"
        ],
        "string_mismatches": [
            "example1",
            "example2"
        ]
    },
    "lines containing the word 'blog'": {
        "regex": ".*\\bblog\\b.*",
        "string_matches": [
            "My cool new blog",
            "Check out my latest blog post!",
            "This is a blog about cats"
        ],
        "string_mismatches": [
            "No blogs here",
            "Just some random text",
            "This is a different topic"
        ]
    },
    "lines having words ending with 'en'.": {
        "regex": ".*\\b[A-Za-z]*en\\b.*",
        "string_matches": [
            "This is a golden opportunity.",
            "Open the door and come in"
        ],
        "string_mismatches": [
            "This is a sample sentence.",
            "Another sentence with no matching words.",
            "This one is also different."
        ]
    },
    "lines using at least one 3 letter word": {
        "regex": ".*[A-Za-z]{3}.*",
        "string_matches": [
            "abc",
            "def",
            "ghi"
        ],
        "string_mismatches": [
            "12345",
            "123"
        ]
    },
    "lines which contain the words 'upper' or 'lower'": {
        "regex": ".*(upper|lower).*",
        "string_matches": [
            "This line is in lower case",
            "Upper and lower cases are here"
        ],
        "string_mismatches": [
            "sample1",
            "sample2",
            "sample3"
        ]
    },
    "lines that have the word 'sandwich'": {
        "regex": ".*sandwich.*",
        "string_matches": [
            "I ate a delicious sandwich.",
            "My favorite sandwich is a turkey and swiss.",
            "Is that a veggie sandwich?"
        ],
        "string_mismatches": [
            "I love hamburgers.",
            "He prefers salads.",
            "She is eating a hotdog."
        ]
    },
    "lines ending in 'ia'": {
        "regex": ".*ia",
        "string_matches": [
            "Romania",
            "Bulgaria",
            "Albania"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines that begin with the phrase 'once upon a time'": {
        "regex": "once upon a time.*",
        "string_matches": [
            "once upon a time, in a land far away",
            "once upon a time, there was a princess",
            "once upon a time, a brave knight set out on a quest"
        ],
        "string_mismatches": [
            "a brave knight",
            "in a land far away",
            "there was a princess"
        ]
    },
    "lines that contain the letters 'as' together.": {
        "regex": ".*as.*",
        "string_matches": [
            "aspiration",
            "class",
            "fast"
        ],
        "string_mismatches": [
            "sample1",
            "example",
            "test"
        ]
    },
    "lines that contain at least one digit.": {
        "regex": ".*[0-9].*",
        "string_matches": [
            "a1b",
            "123",
            "xyz456"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain at least three occurrences of 'she' anywhere in the line": {
        "regex": "(.*\\bshe\\b.*){3}",
        "string_matches": [
            "She sells seashells; she likes she-scorpions. She is a she-devil!",
            "She, she, she; three repetitions of she.",
            "She went to see she-wolves; she saw three she-wolves in the woods."
        ],
        "string_mismatches": [
            "She sells seashells by the seashore.",
            "She went to the store and bought some sheeting.",
            "The girl's name is Shelley; she is a she-wolf in disguise.",
            "There is a she-cat in the garden. She is very friendly.",
            "She had a little lamb; its fleece was white as snow. She loved it dearly; she never let it go."
        ]
    },
    "lines that begin with a word whose first letter is a vowel (A, E, I, O, U)": {
        "regex": "^\\b[AEIOUaeiou][A-Za-z]*\\b.*",
        "string_matches": [
            "Apple",
            "Orange",
            "Elephant",
            "Eagle",
            "Ireland"
        ],
        "string_mismatches": [
            "Hello",
            "World",
            "Python",
            "Java",
            "Rust"
        ]
    },
    "lines that begin with a numeral (0-9)": {
        "regex": "^[0-9].*",
        "string_matches": [
            "123 abc",
            "456 def",
            "789 ghi"
        ],
        "string_mismatches": [
            "abc 123",
            "def 456",
            "ghi 789"
        ]
    },
    "lines that contain at least one word starting with 'G' and ending with 'y'": {
        "regex": ".*\\bG[A-Za-z]*y\\b.*",
        "string_matches": [
            "Galaxy",
            "Glory",
            "Gregory"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines that contain at least three distinct words": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){3,}",
        "string_matches": [
            "this is a sentence",
            "this is another one",
            "sentences are usually long"
        ],
        "string_mismatches": [
            "one",
            "two",
            "a"
        ]
    },
    "lines that contain at least one word where the letter 'e' appears after the letter 'c'": {
        "regex": ".*\\b[A-Za-z]*c[A-Za-z]*e[A-Za-z]*\\b.*",
        "string_matches": [
            "ocean",
            "ice cream",
            "bracelet"
        ],
        "string_mismatches": [
            "car",
            "bat",
            "sun"
        ]
    },
    "lines that begin with the exact word 'omega'": {
        "regex": "^omega\\b.*",
        "string_matches": [
            "omega rocks",
            "omega is great",
            "omega"
        ],
        "string_mismatches": [
            "alpha",
            "beta",
            "gamma"
        ]
    },
    "lines that contain at least one word consisting of exactly three letters": {
        "regex": ".*\\b[A-Za-z]{3}\\b.*",
        "string_matches": [
            "cat sat",
            "the big dog",
            "ran so fast"
        ],
        "string_mismatches": [
            "this is a longer string",
            "another example",
            "no short words here"
        ]
    },
    "lines that contain at least one word ending with 'ot'": {
        "regex": ".*\\b[A-Za-z]*ot\\b.*",
        "string_matches": [
            "parrot",
            "forgot",
            "shot"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "test"
        ]
    },
    "lines that contain at least one word consisting of at least seven letters": {
        "regex": ".*\\b[A-Za-z]{7,}\\b.*",
        "string_matches": [
            "qualification",
            "understanding",
            "communication",
            "establishment",
            "consideration"
        ],
        "string_mismatches": [
            "cat",
            "dog",
            "sun",
            "tree",
            "car"
        ]
    },
    "lines that contain the exact phrase 'and in this life' as a whole unit": {
        "regex": ".*\\band in this life\\b.*",
        "string_matches": [
            "and in this life is good",
            "I believe and in this life we will succeed",
            "struggle and in this life, there is always hope"
        ],
        "string_mismatches": [
            "this life is good",
            "I believe we will succeed",
            "there is always hope"
        ]
    },
   "lines that contain at least 4 words.": {
        "regex": "(.*\\b[A-Za-z]+\\b.*){4,}",
        "string_matches": [
            "Four words are present",
            "This is a sentence with more than four words",
            "Another sentence with at least four words"
        ],
        "string_mismatches": [
            "one",
            "two words",
            "three word",
            "short"
        ]
    },
    "lines using at least 3 'b' anywhere": {
        "regex": "(.*b.*){3,}",
        "string_matches": [
            "bobb",
            "bbbbbbbbbbbbbbbbb",
            "The big bad bear"
        ],
        "string_mismatches": [
            "aa",
            "a",
            "cat",
            "dog",
            "123"
        ]
    },
    "lines that contain an 'x'": {
        "regex": ".*x.*",
        "string_matches": [
            "xyz",
            "x",
            "axbc"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines that contain the symbol '-'.": {
        "regex": ".*-.*",
        "string_matches": [
            "a-bc",
            "a-bc-def",
            "123-456"
        ],
        "string_mismatches": [
            "abc",
            "def",
            "ghi"
        ]
    },
    "lines with exactly 3 letters, starting with 'x'": {
        "regex": "x[A-Za-z]{2}",
        "string_matches": [
            "xyz",
            "xya",
            "xaz"
        ],
        "string_mismatches": [
            "abcd",
            "xy",
            "x"
        ]
    },
    "lines that contain '-' between words 'a' and 'lot' with any number of spaces between.": {
        "regex": ".*(\\ba\\b.*\\-.*\\blot\\b|\\blot\\b.*\\-.*\\ba\\b).*",
        "string_matches": [
            "a-lot",
            "a- lot",
            "a -lot",
            "a  -  lot"
        ],
        "string_mismatches": [
            "a lot",
            "a lot of",
            "alot",
            "a   lot"
        ]
    },
    "lines with at least one word that end in 'n'.": {
        "regex": ".*\\b[A-Za-z]*n\\b.*",
        "string_matches": [
            "Open the door",
            "Clean your room"
        ],
        "string_mismatches": [
            "This is a sample string",
            "Another string here"
        ]
    },
    "lines using 'lay' or 'lie'": {
        "regex": ".*l(ay|ie).*",
        "string_matches": [
            "I lay down on the couch.",
            "The book lies on the table.",
            "They lay the groundwork for the project.",
            "He lay there for hours.",
            "The city lies nestled in the valley."
        ],
        "string_mismatches": [
            "The quick brown rabbit jumps over the lazy frogs.",
            "Water flows downhill."
        ]
    },
    "lines that contain at least five words that start with the letter 'f'": {
        "regex": "(.*\\bf[A-Za-z]*\\b.*){5,}",
        "string_matches": [
            "five fat frogs fly fast",
            "fifty fine furry foxes fought ferociously",
            "Frank's five fluffy friends frolicked freely"
        ],
        "string_mismatches": [
            "Four furry friends",
            "The five fluffy kittens",
            "Only three foxes"
        ]
    },
    "lines that contain the exact word 'puppy' at least once": {
        "regex": ".*\\bpuppy\\b.*",
        "string_matches": [
            "My new puppy is so cute!",
            "The puppy learned a new trick.",
            "A playful puppy ran through the park.",
            "This is a puppy.",
            "I want a puppy for Christmas"
        ],
        "string_mismatches": [
            "The cat sat on the mat.",
            "Birds singing in the trees.",
            "The sun is shining brightly.",
            "Winter is coming.",
            "She is reading a book."
        ]
    },
      "lines that contain exactly 'DEF.' anywhere in the string'": {
        "regex": ".*DEF\\..*",
        "string_matches": [
            "DEF.",
            "This line contains DEF.",
            "DEF. This is a test."
        ],
        "string_mismatches": [
            "DEF",
            "DEF ",
            "DEF1",
            "DEFS",
            "Definition"
        ]
    },
    "lines using at least one word ending with 'on'.": {
        "regex": ".*\\b[A-Za-z]*on\\b.*",
        "string_matches": [
            "The sun shone brightly on the horizon.",
            "He put his coat on.",
            "Based on the information given, we can conclude that..."
        ],
        "string_mismatches": [
            "This is a simple sentence.",
            "No relevant words here."
        ]
    },
    "lines that use at least one word starting with 'fu'.": {
        "regex": ".*\\bfu[A-Za-z]*\\b.*",
        "string_matches": [
            "fuchsia",
            "fulcrum",
            "function",
            "fundamental",
            "furthermore"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry",
            "date",
            "elderberry"
        ]
    },
    "lines beginning with 'begin'": {
        "regex": "begin.*",
        "string_matches": [
            "beginner",
            "beginner's",
            "beginning"
        ],
        "string_mismatches": [
            "abc",
            "Begin",
            " end"
        ]
    },
    "lines that begin with a vowel (A, E, I, O, U) and end with the letter 'e'": {
        "regex": "^[AEIOUaeiou].*e$",
        "string_matches": [
            "apple",
            "orange",
            "eagle",
            "alice"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "test",
            "foo"
        ]
    },
    "lines that start with the exact word 'the', followed by any content": {
        "regex": "^the\\b.*",
        "string_matches": [
            "the quick brown rabbit",
            "the rain in Spain",
            "the sun shines bright"
        ],
        "string_mismatches": [
            "a quick brown fox",
            "rain in Spain",
            "sun shines bright"
        ]
    },
    "lines that end with the exact word 'and'": {
        "regex": ".*\\band$",
        "string_matches": [
            "This line ends with and",
            "Another line that ends with and",
            "One more string ending with and"
        ],
        "string_mismatches": [
            "This is a sample string.",
            "Another string here.",
            "A third example string"
        ]
    },
    "lines containing a word that starts with 'pe' followed somewhere later by the word 'pan'": {
        "regex": ".*\\bpe[A-Za-z]*\\b.*\\bpan\\b.*",
        "string_matches": [
            "pepperoni pan pizza",
            "penguin pan ts",
            "people pan handler"
        ],
        "string_mismatches": [
            "perilous journey",
            "pencil box",
            "people mover"
        ]
    },
    "lines that contain the exact word 'Facebook' anywhere": {
        "regex": ".*\\bFacebook\\b.*",
        "string_matches": [
            "Facebook post",
            "Facebook is great",
            "My Facebook account"
        ],
        "string_mismatches": [
            "I like Twitter",
            "This is a Google product",
            "This is an Apple product"
        ]
    },
    "lines containing at least one word that includes 're' as part of it": {
        "regex": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*",
        "string_matches": [
            "there",
            "wherefore",
            "repair"
        ],
        "string_mismatches": [
            "hello",
            "world",
            "abc"
        ]
    },
    "lines containing either the exact word 'of' or the exact word 'in'": {
        "regex": ".*\\b(of|in)\\b.*",
        "string_matches": [
            "The book is made of paper",
            "The cat sat in the sun",
            "The car is in the garage"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
    "lines containing at least two separate words that contain the letter 'y'": {
        "regex": ".*(\\b[A-Za-z]*y[A-Za-z]*\\b.*){2,}.*",
        "string_matches": [
            "yellow yarrow",
            "yesterday's yummy discovery",
            "my yellow yoyo"
        ],
        "string_mismatches": [
            "apple",
            "yesterday"
        ]
    },
    "lines that contain at least one occurrence of the letter 'z' anywhere": {
        "regex": ".*z.*",
        "string_matches": [
            "pizza",
            "maze",
            "zoology",
            "zealous"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape"
        ]
    },
    "lines containing 'ser' that appears after either 'lin' or 'ku'": {
        "regex": ".*(lin|ku).*ser.*",
        "string_matches": [
            "linen server",
            "kulser",
            "linser"
        ],
        "string_mismatches": [
            "kul",
            "lin"
        ]
    },
    "lines containing exactly three words, each consisting of exactly four letters": {
        "regex": "^(\\b[A-Za-z]{4}\\b\\s*){3}$",
        "string_matches": [
            "play work code",
            "test this task"
        ],
        "string_mismatches": [
            "short",
            "a word",
            "four words",
            "1234 5678 9012",
            "this is a sentence"
        ]
    },
    "lines that end with 'az'": {
        "regex": ".*az$",
        "string_matches": [
            "pizzaz",
            "daz"
        ],
        "string_mismatches": [
            "pizza",
            "da",
            "fuzzball"
        ]
    },
    "lines that start with the letter 'z'": {
        "regex": "^z.*",
        "string_matches": [
            "zebra",
            "zip",
            "zest"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "cherry"
        ]
    },
      "lines containing either 'b' or 'c' anywhere": {
        "regex": ".*(b|c).*",
        "string_matches": [
            "abc",
            "bcd",
            "cdb"
        ],
        "string_mismatches": [
            "a",
            "d",
            "efg"
        ]
    },
    "lines that contain the digit '4' appearing between the digits '3' and '5'": {
        "regex": ".*3.*4.*5.*|.*5.*4.*3.*",
        "string_matches": [
            "345",
            "1345",
            "a345b",
            "345c"
        ],
        "string_mismatches": [
            "354",
            "35",
            "435",
            "123",
            "abc"
        ]
    },
    "lines containing at least one word that ends in 'er'": {
        "regex": ".*\\b[A-Za-z]*er\\b.*",
        "string_matches": [
            "The faster runner won the race.",
            "The manager made a clever decision.",
            "The bigger hammer broke the rock.",
            "Water flows over the river.",
            "The computer's processor is very fast."
        ],
        "string_mismatches": [
            "This is a sample string.",
            "A third string sample"
        ]
    },
    "lines using the word 'going' followed immediately by a word starting with 'd'.": {
        "regex": ".*\\bgoing\\b.*d.*",
        "string_matches": [
            "I'm going down the street.",
            "He's going downtown.",
            "We are going during the day.",
            "She's going directly."
        ],
        "string_mismatches": [
            "He is going to the store.",
            "I was going home.",
            "She is going there.",
            "They were going away.",
            "We are going now"
        ]
    },
    "lines that mention 'Dylan' and 'Lynda'.": {
        "regex": "(.*Dylan.*Lynda.*)|(.*Lynda.*Dylan.*)",
        "string_matches": [
            "Dylan and Lynda went to the park.",
            "Lynda helped Dylan with his homework.",
            "Dylan saw Lynda across the room and waved.  "
        ],
        "string_mismatches": [
            "Dylan went to the park.",
            "Lynda helped with the homework.",
            "He saw her across the room and waved."
        ]
    },
    "lines containing 'foo' or 'nu' before 'dist' or 'dust'": {
        "regex": ".*(foo|nu).*(dist|dust).*",
        "string_matches": [
            "foo dust is near",
            "nu dist is far",
            "foo dist is here",
            "nu dust is there"
        ],
        "string_mismatches": [
            "dust is near foo",
            "dist is far nu",
            "dust is here foo",
            "dist is there nu",
            "no match here"
        ]
    },
    "lines using the word 'An' at least once.": {
        "regex": ".*\\bAn\\b.*",
        "string_matches": [
            "An apple a day keeps the doctor away.",
            "An interesting book.",
            "An old movie"
        ],
        "string_mismatches": [
            "The apple is red.",
            "Interesting stories."
        ]
    },
    "lines that have at least one word ending with 'ti'.": {
        "regex": ".*\\b[A-Za-z]*ti\\b.*",
        "string_matches": [
            "quantiti",
            "compatiti"
        ],
        "string_mismatches": [
            "string",
            "sample",
            "example"
        ]
    },
    "lines with at least one word starting with 'ca'.": {
        "regex": ".*\\b[A-Za-z]*ca[A-Za-z]*\\b.*",
        "string_matches": [
            "cabbage",
            "decapitate",
            "capacity",
            "cacao",
            "casually funny"
        ],
        "string_mismatches": [
            "apple",
            "banana",
            "orange",
            "grape",
            "watermelon"
        ]
    },
    "lines that have exactly 3 words": {
        "regex": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}",
        "string_matches": [
            "The sky blue",
            "I love pizza",
            "Cats are cute"
        ],
        "string_mismatches": [
            "Short",
            "Another string"
        ]
    },
    "lines that have at least a single 2 letter sequence": {
        "regex": ".*[A-Za-z]{2}.*",
        "string_matches": [
            "ab",
            "bc",
            "cd",
            "de",
            "ef"
        ],
        "string_mismatches": [
            "a",
            "b",
            "c",
            "d",
            "e"
        ]
    },
    "lines containing at least one 5 letter word.": {
        "regex": ".*\\b[A-Za-z]{5}\\b.*",
        "string_matches": [
            "abcde",
            "fghij",
            "klmno",
            "pqrst",
            "uvwxy"
        ],
        "string_mismatches": [
            "longer",
            "another",
            "example"
        ]
    }
}